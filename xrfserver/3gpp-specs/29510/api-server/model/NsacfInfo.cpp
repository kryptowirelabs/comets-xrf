/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NsacfInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NsacfInfo::NsacfInfo()
{
    m_TaiListIsSet = false;
    m_TaiRangeListIsSet = false;
    
}

void NsacfInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NsacfInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NsacfInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NsacfInfo" : pathPrefix;

             
    if (taiListIsSet())
    {
        const std::vector<Tai>& value = m_TaiList;
        const std::string currentValuePath = _pathPrefix + ".taiList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Tai& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".taiList") && success;
 
                i++;
            }
        }

    }
         
    if (taiRangeListIsSet())
    {
        const std::vector<TaiRange>& value = m_TaiRangeList;
        const std::string currentValuePath = _pathPrefix + ".taiRangeList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const TaiRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".taiRangeList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool NsacfInfo::operator==(const NsacfInfo& rhs) const
{
    return
    
    
    (getNsacfCapability() == rhs.getNsacfCapability())
     &&
    
    
    ((!taiListIsSet() && !rhs.taiListIsSet()) || (taiListIsSet() && rhs.taiListIsSet() && getTaiList() == rhs.getTaiList())) &&
    
    
    ((!taiRangeListIsSet() && !rhs.taiRangeListIsSet()) || (taiRangeListIsSet() && rhs.taiRangeListIsSet() && getTaiRangeList() == rhs.getTaiRangeList()))
    
    ;
}

bool NsacfInfo::operator!=(const NsacfInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NsacfInfo& o)
{
    j = nlohmann::json();
    j["nsacfCapability"] = o.m_NsacfCapability;
    if(o.taiListIsSet() || !o.m_TaiList.empty())
        j["taiList"] = o.m_TaiList;
    if(o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
        j["taiRangeList"] = o.m_TaiRangeList;
    
}

void from_json(const nlohmann::json& j, NsacfInfo& o)
{
    j.at("nsacfCapability").get_to(o.m_NsacfCapability);
    if(j.find("taiList") != j.end())
    {
        j.at("taiList").get_to(o.m_TaiList);
        o.m_TaiListIsSet = true;
    } 
    if(j.find("taiRangeList") != j.end())
    {
        j.at("taiRangeList").get_to(o.m_TaiRangeList);
        o.m_TaiRangeListIsSet = true;
    } 
    
}

NsacfCapability NsacfInfo::getNsacfCapability() const
{
    return m_NsacfCapability;
}
void NsacfInfo::setNsacfCapability(NsacfCapability const& value)
{
    m_NsacfCapability = value;
}
std::vector<Tai> NsacfInfo::getTaiList() const
{
    return m_TaiList;
}
void NsacfInfo::setTaiList(std::vector<Tai> const& value)
{
    m_TaiList = value;
    m_TaiListIsSet = true;
}
bool NsacfInfo::taiListIsSet() const
{
    return m_TaiListIsSet;
}
void NsacfInfo::unsetTaiList()
{
    m_TaiListIsSet = false;
}
std::vector<TaiRange> NsacfInfo::getTaiRangeList() const
{
    return m_TaiRangeList;
}
void NsacfInfo::setTaiRangeList(std::vector<TaiRange> const& value)
{
    m_TaiRangeList = value;
    m_TaiRangeListIsSet = true;
}
bool NsacfInfo::taiRangeListIsSet() const
{
    return m_TaiRangeListIsSet;
}
void NsacfInfo::unsetTaiRangeList()
{
    m_TaiRangeListIsSet = false;
}


} // namespace org::openapitools::server::model

