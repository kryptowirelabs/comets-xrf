/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NwdafCapability.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NwdafCapability::NwdafCapability()
{
    m_AnalyticsAggregation = false;
    m_AnalyticsAggregationIsSet = false;
    m_AnalyticsMetadataProvisioning = false;
    m_AnalyticsMetadataProvisioningIsSet = false;
    
}

void NwdafCapability::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NwdafCapability::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NwdafCapability::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NwdafCapability" : pathPrefix;

            
    return success;
}

bool NwdafCapability::operator==(const NwdafCapability& rhs) const
{
    return
    
    
    
    ((!analyticsAggregationIsSet() && !rhs.analyticsAggregationIsSet()) || (analyticsAggregationIsSet() && rhs.analyticsAggregationIsSet() && isAnalyticsAggregation() == rhs.isAnalyticsAggregation())) &&
    
    
    ((!analyticsMetadataProvisioningIsSet() && !rhs.analyticsMetadataProvisioningIsSet()) || (analyticsMetadataProvisioningIsSet() && rhs.analyticsMetadataProvisioningIsSet() && isAnalyticsMetadataProvisioning() == rhs.isAnalyticsMetadataProvisioning()))
    
    ;
}

bool NwdafCapability::operator!=(const NwdafCapability& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NwdafCapability& o)
{
    j = nlohmann::json();
    if(o.analyticsAggregationIsSet())
        j["analyticsAggregation"] = o.m_AnalyticsAggregation;
    if(o.analyticsMetadataProvisioningIsSet())
        j["analyticsMetadataProvisioning"] = o.m_AnalyticsMetadataProvisioning;
    
}

void from_json(const nlohmann::json& j, NwdafCapability& o)
{
    if(j.find("analyticsAggregation") != j.end())
    {
        j.at("analyticsAggregation").get_to(o.m_AnalyticsAggregation);
        o.m_AnalyticsAggregationIsSet = true;
    } 
    if(j.find("analyticsMetadataProvisioning") != j.end())
    {
        j.at("analyticsMetadataProvisioning").get_to(o.m_AnalyticsMetadataProvisioning);
        o.m_AnalyticsMetadataProvisioningIsSet = true;
    } 
    
}

bool NwdafCapability::isAnalyticsAggregation() const
{
    return m_AnalyticsAggregation;
}
void NwdafCapability::setAnalyticsAggregation(bool const value)
{
    m_AnalyticsAggregation = value;
    m_AnalyticsAggregationIsSet = true;
}
bool NwdafCapability::analyticsAggregationIsSet() const
{
    return m_AnalyticsAggregationIsSet;
}
void NwdafCapability::unsetAnalyticsAggregation()
{
    m_AnalyticsAggregationIsSet = false;
}
bool NwdafCapability::isAnalyticsMetadataProvisioning() const
{
    return m_AnalyticsMetadataProvisioning;
}
void NwdafCapability::setAnalyticsMetadataProvisioning(bool const value)
{
    m_AnalyticsMetadataProvisioning = value;
    m_AnalyticsMetadataProvisioningIsSet = true;
}
bool NwdafCapability::analyticsMetadataProvisioningIsSet() const
{
    return m_AnalyticsMetadataProvisioningIsSet;
}
void NwdafCapability::unsetAnalyticsMetadataProvisioning()
{
    m_AnalyticsMetadataProvisioningIsSet = false;
}


} // namespace org::openapitools::server::model

