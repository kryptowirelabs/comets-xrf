/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * HssInfo.h
 *
 * Information of an HSS NF Instance
 */

#ifndef HssInfo_H_
#define HssInfo_H_


#include "IdentityRange.h"
#include <string>
#include "ImsiRange.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Information of an HSS NF Instance
/// </summary>
class  HssInfo
{
public:
    HssInfo();
    virtual ~HssInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const HssInfo& rhs) const;
    bool operator!=(const HssInfo& rhs) const;

    /////////////////////////////////////////////
    /// HssInfo members

    /// <summary>
    /// Identifier of a group of NFs.
    /// </summary>
    std::string getGroupId() const;
    void setGroupId(std::string const& value);
    bool groupIdIsSet() const;
    void unsetGroupId();
    /// <summary>
    /// 
    /// </summary>
    std::vector<ImsiRange> getImsiRanges() const;
    void setImsiRanges(std::vector<ImsiRange> const& value);
    bool imsiRangesIsSet() const;
    void unsetImsiRanges();
    /// <summary>
    /// 
    /// </summary>
    std::vector<IdentityRange> getImsPrivateIdentityRanges() const;
    void setImsPrivateIdentityRanges(std::vector<IdentityRange> const& value);
    bool imsPrivateIdentityRangesIsSet() const;
    void unsetImsPrivateIdentityRanges();
    /// <summary>
    /// 
    /// </summary>
    std::vector<IdentityRange> getImsPublicIdentityRanges() const;
    void setImsPublicIdentityRanges(std::vector<IdentityRange> const& value);
    bool imsPublicIdentityRangesIsSet() const;
    void unsetImsPublicIdentityRanges();
    /// <summary>
    /// 
    /// </summary>
    std::vector<IdentityRange> getMsisdnRanges() const;
    void setMsisdnRanges(std::vector<IdentityRange> const& value);
    bool msisdnRangesIsSet() const;
    void unsetMsisdnRanges();
    /// <summary>
    /// 
    /// </summary>
    std::vector<IdentityRange> getExternalGroupIdentifiersRanges() const;
    void setExternalGroupIdentifiersRanges(std::vector<IdentityRange> const& value);
    bool externalGroupIdentifiersRangesIsSet() const;
    void unsetExternalGroupIdentifiersRanges();

    friend void to_json(nlohmann::json& j, const HssInfo& o);
    friend void from_json(const nlohmann::json& j, HssInfo& o);
protected:
    std::string m_GroupId;
    bool m_GroupIdIsSet;
    std::vector<ImsiRange> m_ImsiRanges;
    bool m_ImsiRangesIsSet;
    std::vector<IdentityRange> m_ImsPrivateIdentityRanges;
    bool m_ImsPrivateIdentityRangesIsSet;
    std::vector<IdentityRange> m_ImsPublicIdentityRanges;
    bool m_ImsPublicIdentityRangesIsSet;
    std::vector<IdentityRange> m_MsisdnRanges;
    bool m_MsisdnRangesIsSet;
    std::vector<IdentityRange> m_ExternalGroupIdentifiersRanges;
    bool m_ExternalGroupIdentifiersRangesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* HssInfo_H_ */
