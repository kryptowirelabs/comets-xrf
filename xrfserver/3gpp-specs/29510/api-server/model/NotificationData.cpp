/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NotificationData.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NotificationData::NotificationData()
{
    m_NfInstanceUri = "";
    m_NfProfileIsSet = false;
    m_ProfileChangesIsSet = false;
    m_ConditionEventIsSet = false;
    
}

void NotificationData::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NotificationData::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NotificationData::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NotificationData" : pathPrefix;

                     
    if (profileChangesIsSet())
    {
        const std::vector<ChangeItem>& value = m_ProfileChanges;
        const std::string currentValuePath = _pathPrefix + ".profileChanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ChangeItem& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".profileChanges") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool NotificationData::operator==(const NotificationData& rhs) const
{
    return
    
    
    (getEvent() == rhs.getEvent())
     &&
    
    (getNfInstanceUri() == rhs.getNfInstanceUri())
     &&
    
    
    ((!nfProfileIsSet() && !rhs.nfProfileIsSet()) || (nfProfileIsSet() && rhs.nfProfileIsSet() && getNfProfile() == rhs.getNfProfile())) &&
    
    
    ((!profileChangesIsSet() && !rhs.profileChangesIsSet()) || (profileChangesIsSet() && rhs.profileChangesIsSet() && getProfileChanges() == rhs.getProfileChanges())) &&
    
    
    ((!conditionEventIsSet() && !rhs.conditionEventIsSet()) || (conditionEventIsSet() && rhs.conditionEventIsSet() && getConditionEvent() == rhs.getConditionEvent()))
    
    ;
}

bool NotificationData::operator!=(const NotificationData& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NotificationData& o)
{
    j = nlohmann::json();
    j["event"] = o.m_Event;
    j["nfInstanceUri"] = o.m_NfInstanceUri;
    if(o.nfProfileIsSet())
        j["nfProfile"] = o.m_NfProfile;
    if(o.profileChangesIsSet() || !o.m_ProfileChanges.empty())
        j["profileChanges"] = o.m_ProfileChanges;
    if(o.conditionEventIsSet())
        j["conditionEvent"] = o.m_ConditionEvent;
    
}

void from_json(const nlohmann::json& j, NotificationData& o)
{
    j.at("event").get_to(o.m_Event);
    j.at("nfInstanceUri").get_to(o.m_NfInstanceUri);
    if(j.find("nfProfile") != j.end())
    {
        j.at("nfProfile").get_to(o.m_NfProfile);
        o.m_NfProfileIsSet = true;
    } 
    if(j.find("profileChanges") != j.end())
    {
        j.at("profileChanges").get_to(o.m_ProfileChanges);
        o.m_ProfileChangesIsSet = true;
    } 
    if(j.find("conditionEvent") != j.end())
    {
        j.at("conditionEvent").get_to(o.m_ConditionEvent);
        o.m_ConditionEventIsSet = true;
    } 
    
}

NotificationEventType NotificationData::getEvent() const
{
    return m_Event;
}
void NotificationData::setEvent(NotificationEventType const& value)
{
    m_Event = value;
}
std::string NotificationData::getNfInstanceUri() const
{
    return m_NfInstanceUri;
}
void NotificationData::setNfInstanceUri(std::string const& value)
{
    m_NfInstanceUri = value;
}
NFProfile NotificationData::getNfProfile() const
{
    return m_NfProfile;
}
void NotificationData::setNfProfile(NFProfile const& value)
{
    m_NfProfile = value;
    m_NfProfileIsSet = true;
}
bool NotificationData::nfProfileIsSet() const
{
    return m_NfProfileIsSet;
}
void NotificationData::unsetNfProfile()
{
    m_NfProfileIsSet = false;
}
std::vector<ChangeItem> NotificationData::getProfileChanges() const
{
    return m_ProfileChanges;
}
void NotificationData::setProfileChanges(std::vector<ChangeItem> const& value)
{
    m_ProfileChanges = value;
    m_ProfileChangesIsSet = true;
}
bool NotificationData::profileChangesIsSet() const
{
    return m_ProfileChangesIsSet;
}
void NotificationData::unsetProfileChanges()
{
    m_ProfileChangesIsSet = false;
}
ConditionEventType NotificationData::getConditionEvent() const
{
    return m_ConditionEvent;
}
void NotificationData::setConditionEvent(ConditionEventType const& value)
{
    m_ConditionEvent = value;
    m_ConditionEventIsSet = true;
}
bool NotificationData::conditionEventIsSet() const
{
    return m_ConditionEventIsSet;
}
void NotificationData::unsetConditionEvent()
{
    m_ConditionEventIsSet = false;
}


} // namespace org::openapitools::server::model

