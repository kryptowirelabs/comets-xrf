/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PcfInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PcfInfo::PcfInfo()
{
    m_GroupId = "";
    m_GroupIdIsSet = false;
    m_DnnListIsSet = false;
    m_SupiRangesIsSet = false;
    m_GpsiRangesIsSet = false;
    m_RxDiamHost = "";
    m_RxDiamHostIsSet = false;
    m_RxDiamRealm = "";
    m_RxDiamRealmIsSet = false;
    m_V2xSupportInd = false;
    m_V2xSupportIndIsSet = false;
    m_ProseSupportInd = false;
    m_ProseSupportIndIsSet = false;
    
}

void PcfInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PcfInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PcfInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PcfInfo" : pathPrefix;

             
    if (dnnListIsSet())
    {
        const std::vector<std::string>& value = m_DnnList;
        const std::string currentValuePath = _pathPrefix + ".dnnList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (supiRangesIsSet())
    {
        const std::vector<SupiRange>& value = m_SupiRanges;
        const std::string currentValuePath = _pathPrefix + ".supiRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const SupiRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".supiRanges") && success;
 
                i++;
            }
        }

    }
         
    if (gpsiRangesIsSet())
    {
        const std::vector<IdentityRange>& value = m_GpsiRanges;
        const std::string currentValuePath = _pathPrefix + ".gpsiRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IdentityRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".gpsiRanges") && success;
 
                i++;
            }
        }

    }
         
    if (rxDiamHostIsSet())
    {
        const std::string& value = m_RxDiamHost;
        const std::string currentValuePath = _pathPrefix + ".rxDiamHost";
                
        

    }
         
    if (rxDiamRealmIsSet())
    {
        const std::string& value = m_RxDiamRealm;
        const std::string currentValuePath = _pathPrefix + ".rxDiamRealm";
                
        

    }
            
    return success;
}

bool PcfInfo::operator==(const PcfInfo& rhs) const
{
    return
    
    
    
    ((!groupIdIsSet() && !rhs.groupIdIsSet()) || (groupIdIsSet() && rhs.groupIdIsSet() && getGroupId() == rhs.getGroupId())) &&
    
    
    ((!dnnListIsSet() && !rhs.dnnListIsSet()) || (dnnListIsSet() && rhs.dnnListIsSet() && getDnnList() == rhs.getDnnList())) &&
    
    
    ((!supiRangesIsSet() && !rhs.supiRangesIsSet()) || (supiRangesIsSet() && rhs.supiRangesIsSet() && getSupiRanges() == rhs.getSupiRanges())) &&
    
    
    ((!gpsiRangesIsSet() && !rhs.gpsiRangesIsSet()) || (gpsiRangesIsSet() && rhs.gpsiRangesIsSet() && getGpsiRanges() == rhs.getGpsiRanges())) &&
    
    
    ((!rxDiamHostIsSet() && !rhs.rxDiamHostIsSet()) || (rxDiamHostIsSet() && rhs.rxDiamHostIsSet() && getRxDiamHost() == rhs.getRxDiamHost())) &&
    
    
    ((!rxDiamRealmIsSet() && !rhs.rxDiamRealmIsSet()) || (rxDiamRealmIsSet() && rhs.rxDiamRealmIsSet() && getRxDiamRealm() == rhs.getRxDiamRealm())) &&
    
    
    ((!v2xSupportIndIsSet() && !rhs.v2xSupportIndIsSet()) || (v2xSupportIndIsSet() && rhs.v2xSupportIndIsSet() && isV2xSupportInd() == rhs.isV2xSupportInd())) &&
    
    
    ((!proseSupportIndIsSet() && !rhs.proseSupportIndIsSet()) || (proseSupportIndIsSet() && rhs.proseSupportIndIsSet() && isProseSupportInd() == rhs.isProseSupportInd()))
    
    ;
}

bool PcfInfo::operator!=(const PcfInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PcfInfo& o)
{
    j = nlohmann::json();
    if(o.groupIdIsSet())
        j["groupId"] = o.m_GroupId;
    if(o.dnnListIsSet() || !o.m_DnnList.empty())
        j["dnnList"] = o.m_DnnList;
    if(o.supiRangesIsSet() || !o.m_SupiRanges.empty())
        j["supiRanges"] = o.m_SupiRanges;
    if(o.gpsiRangesIsSet() || !o.m_GpsiRanges.empty())
        j["gpsiRanges"] = o.m_GpsiRanges;
    if(o.rxDiamHostIsSet())
        j["rxDiamHost"] = o.m_RxDiamHost;
    if(o.rxDiamRealmIsSet())
        j["rxDiamRealm"] = o.m_RxDiamRealm;
    if(o.v2xSupportIndIsSet())
        j["v2xSupportInd"] = o.m_V2xSupportInd;
    if(o.proseSupportIndIsSet())
        j["proseSupportInd"] = o.m_ProseSupportInd;
    
}

void from_json(const nlohmann::json& j, PcfInfo& o)
{
    if(j.find("groupId") != j.end())
    {
        j.at("groupId").get_to(o.m_GroupId);
        o.m_GroupIdIsSet = true;
    } 
    if(j.find("dnnList") != j.end())
    {
        j.at("dnnList").get_to(o.m_DnnList);
        o.m_DnnListIsSet = true;
    } 
    if(j.find("supiRanges") != j.end())
    {
        j.at("supiRanges").get_to(o.m_SupiRanges);
        o.m_SupiRangesIsSet = true;
    } 
    if(j.find("gpsiRanges") != j.end())
    {
        j.at("gpsiRanges").get_to(o.m_GpsiRanges);
        o.m_GpsiRangesIsSet = true;
    } 
    if(j.find("rxDiamHost") != j.end())
    {
        j.at("rxDiamHost").get_to(o.m_RxDiamHost);
        o.m_RxDiamHostIsSet = true;
    } 
    if(j.find("rxDiamRealm") != j.end())
    {
        j.at("rxDiamRealm").get_to(o.m_RxDiamRealm);
        o.m_RxDiamRealmIsSet = true;
    } 
    if(j.find("v2xSupportInd") != j.end())
    {
        j.at("v2xSupportInd").get_to(o.m_V2xSupportInd);
        o.m_V2xSupportIndIsSet = true;
    } 
    if(j.find("proseSupportInd") != j.end())
    {
        j.at("proseSupportInd").get_to(o.m_ProseSupportInd);
        o.m_ProseSupportIndIsSet = true;
    } 
    
}

std::string PcfInfo::getGroupId() const
{
    return m_GroupId;
}
void PcfInfo::setGroupId(std::string const& value)
{
    m_GroupId = value;
    m_GroupIdIsSet = true;
}
bool PcfInfo::groupIdIsSet() const
{
    return m_GroupIdIsSet;
}
void PcfInfo::unsetGroupId()
{
    m_GroupIdIsSet = false;
}
std::vector<std::string> PcfInfo::getDnnList() const
{
    return m_DnnList;
}
void PcfInfo::setDnnList(std::vector<std::string> const& value)
{
    m_DnnList = value;
    m_DnnListIsSet = true;
}
bool PcfInfo::dnnListIsSet() const
{
    return m_DnnListIsSet;
}
void PcfInfo::unsetDnnList()
{
    m_DnnListIsSet = false;
}
std::vector<SupiRange> PcfInfo::getSupiRanges() const
{
    return m_SupiRanges;
}
void PcfInfo::setSupiRanges(std::vector<SupiRange> const& value)
{
    m_SupiRanges = value;
    m_SupiRangesIsSet = true;
}
bool PcfInfo::supiRangesIsSet() const
{
    return m_SupiRangesIsSet;
}
void PcfInfo::unsetSupiRanges()
{
    m_SupiRangesIsSet = false;
}
std::vector<IdentityRange> PcfInfo::getGpsiRanges() const
{
    return m_GpsiRanges;
}
void PcfInfo::setGpsiRanges(std::vector<IdentityRange> const& value)
{
    m_GpsiRanges = value;
    m_GpsiRangesIsSet = true;
}
bool PcfInfo::gpsiRangesIsSet() const
{
    return m_GpsiRangesIsSet;
}
void PcfInfo::unsetGpsiRanges()
{
    m_GpsiRangesIsSet = false;
}
std::string PcfInfo::getRxDiamHost() const
{
    return m_RxDiamHost;
}
void PcfInfo::setRxDiamHost(std::string const& value)
{
    m_RxDiamHost = value;
    m_RxDiamHostIsSet = true;
}
bool PcfInfo::rxDiamHostIsSet() const
{
    return m_RxDiamHostIsSet;
}
void PcfInfo::unsetRxDiamHost()
{
    m_RxDiamHostIsSet = false;
}
std::string PcfInfo::getRxDiamRealm() const
{
    return m_RxDiamRealm;
}
void PcfInfo::setRxDiamRealm(std::string const& value)
{
    m_RxDiamRealm = value;
    m_RxDiamRealmIsSet = true;
}
bool PcfInfo::rxDiamRealmIsSet() const
{
    return m_RxDiamRealmIsSet;
}
void PcfInfo::unsetRxDiamRealm()
{
    m_RxDiamRealmIsSet = false;
}
bool PcfInfo::isV2xSupportInd() const
{
    return m_V2xSupportInd;
}
void PcfInfo::setV2xSupportInd(bool const value)
{
    m_V2xSupportInd = value;
    m_V2xSupportIndIsSet = true;
}
bool PcfInfo::v2xSupportIndIsSet() const
{
    return m_V2xSupportIndIsSet;
}
void PcfInfo::unsetV2xSupportInd()
{
    m_V2xSupportIndIsSet = false;
}
bool PcfInfo::isProseSupportInd() const
{
    return m_ProseSupportInd;
}
void PcfInfo::setProseSupportInd(bool const value)
{
    m_ProseSupportInd = value;
    m_ProseSupportIndIsSet = true;
}
bool PcfInfo::proseSupportIndIsSet() const
{
    return m_ProseSupportIndIsSet;
}
void PcfInfo::unsetProseSupportInd()
{
    m_ProseSupportIndIsSet = false;
}


} // namespace org::openapitools::server::model

