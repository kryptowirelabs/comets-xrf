/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NfInfo.h
 *
 * Information of a generic NF Instance
 */

#ifndef NfInfo_H_
#define NfInfo_H_


#include "NFType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Information of a generic NF Instance
/// </summary>
class  NfInfo
{
public:
    NfInfo();
    virtual ~NfInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const NfInfo& rhs) const;
    bool operator!=(const NfInfo& rhs) const;

    /////////////////////////////////////////////
    /// NfInfo members

    /// <summary>
    /// 
    /// </summary>
    NFType getNfType() const;
    void setNfType(NFType const& value);
    bool nfTypeIsSet() const;
    void unsetNfType();

    friend void to_json(nlohmann::json& j, const NfInfo& o);
    friend void from_json(const nlohmann::json& j, NfInfo& o);
protected:
    NFType m_NfType;
    bool m_NfTypeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* NfInfo_H_ */
