/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "HssInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

HssInfo::HssInfo()
{
    m_GroupId = "";
    m_GroupIdIsSet = false;
    m_ImsiRangesIsSet = false;
    m_ImsPrivateIdentityRangesIsSet = false;
    m_ImsPublicIdentityRangesIsSet = false;
    m_MsisdnRangesIsSet = false;
    m_ExternalGroupIdentifiersRangesIsSet = false;
    
}

void HssInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool HssInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool HssInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "HssInfo" : pathPrefix;

             
    if (imsiRangesIsSet())
    {
        const std::vector<ImsiRange>& value = m_ImsiRanges;
        const std::string currentValuePath = _pathPrefix + ".imsiRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ImsiRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".imsiRanges") && success;
 
                i++;
            }
        }

    }
         
    if (imsPrivateIdentityRangesIsSet())
    {
        const std::vector<IdentityRange>& value = m_ImsPrivateIdentityRanges;
        const std::string currentValuePath = _pathPrefix + ".imsPrivateIdentityRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IdentityRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".imsPrivateIdentityRanges") && success;
 
                i++;
            }
        }

    }
         
    if (imsPublicIdentityRangesIsSet())
    {
        const std::vector<IdentityRange>& value = m_ImsPublicIdentityRanges;
        const std::string currentValuePath = _pathPrefix + ".imsPublicIdentityRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IdentityRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".imsPublicIdentityRanges") && success;
 
                i++;
            }
        }

    }
         
    if (msisdnRangesIsSet())
    {
        const std::vector<IdentityRange>& value = m_MsisdnRanges;
        const std::string currentValuePath = _pathPrefix + ".msisdnRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IdentityRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".msisdnRanges") && success;
 
                i++;
            }
        }

    }
         
    if (externalGroupIdentifiersRangesIsSet())
    {
        const std::vector<IdentityRange>& value = m_ExternalGroupIdentifiersRanges;
        const std::string currentValuePath = _pathPrefix + ".externalGroupIdentifiersRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IdentityRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".externalGroupIdentifiersRanges") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool HssInfo::operator==(const HssInfo& rhs) const
{
    return
    
    
    
    ((!groupIdIsSet() && !rhs.groupIdIsSet()) || (groupIdIsSet() && rhs.groupIdIsSet() && getGroupId() == rhs.getGroupId())) &&
    
    
    ((!imsiRangesIsSet() && !rhs.imsiRangesIsSet()) || (imsiRangesIsSet() && rhs.imsiRangesIsSet() && getImsiRanges() == rhs.getImsiRanges())) &&
    
    
    ((!imsPrivateIdentityRangesIsSet() && !rhs.imsPrivateIdentityRangesIsSet()) || (imsPrivateIdentityRangesIsSet() && rhs.imsPrivateIdentityRangesIsSet() && getImsPrivateIdentityRanges() == rhs.getImsPrivateIdentityRanges())) &&
    
    
    ((!imsPublicIdentityRangesIsSet() && !rhs.imsPublicIdentityRangesIsSet()) || (imsPublicIdentityRangesIsSet() && rhs.imsPublicIdentityRangesIsSet() && getImsPublicIdentityRanges() == rhs.getImsPublicIdentityRanges())) &&
    
    
    ((!msisdnRangesIsSet() && !rhs.msisdnRangesIsSet()) || (msisdnRangesIsSet() && rhs.msisdnRangesIsSet() && getMsisdnRanges() == rhs.getMsisdnRanges())) &&
    
    
    ((!externalGroupIdentifiersRangesIsSet() && !rhs.externalGroupIdentifiersRangesIsSet()) || (externalGroupIdentifiersRangesIsSet() && rhs.externalGroupIdentifiersRangesIsSet() && getExternalGroupIdentifiersRanges() == rhs.getExternalGroupIdentifiersRanges()))
    
    ;
}

bool HssInfo::operator!=(const HssInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const HssInfo& o)
{
    j = nlohmann::json();
    if(o.groupIdIsSet())
        j["groupId"] = o.m_GroupId;
    if(o.imsiRangesIsSet() || !o.m_ImsiRanges.empty())
        j["imsiRanges"] = o.m_ImsiRanges;
    if(o.imsPrivateIdentityRangesIsSet() || !o.m_ImsPrivateIdentityRanges.empty())
        j["imsPrivateIdentityRanges"] = o.m_ImsPrivateIdentityRanges;
    if(o.imsPublicIdentityRangesIsSet() || !o.m_ImsPublicIdentityRanges.empty())
        j["imsPublicIdentityRanges"] = o.m_ImsPublicIdentityRanges;
    if(o.msisdnRangesIsSet() || !o.m_MsisdnRanges.empty())
        j["msisdnRanges"] = o.m_MsisdnRanges;
    if(o.externalGroupIdentifiersRangesIsSet() || !o.m_ExternalGroupIdentifiersRanges.empty())
        j["externalGroupIdentifiersRanges"] = o.m_ExternalGroupIdentifiersRanges;
    
}

void from_json(const nlohmann::json& j, HssInfo& o)
{
    if(j.find("groupId") != j.end())
    {
        j.at("groupId").get_to(o.m_GroupId);
        o.m_GroupIdIsSet = true;
    } 
    if(j.find("imsiRanges") != j.end())
    {
        j.at("imsiRanges").get_to(o.m_ImsiRanges);
        o.m_ImsiRangesIsSet = true;
    } 
    if(j.find("imsPrivateIdentityRanges") != j.end())
    {
        j.at("imsPrivateIdentityRanges").get_to(o.m_ImsPrivateIdentityRanges);
        o.m_ImsPrivateIdentityRangesIsSet = true;
    } 
    if(j.find("imsPublicIdentityRanges") != j.end())
    {
        j.at("imsPublicIdentityRanges").get_to(o.m_ImsPublicIdentityRanges);
        o.m_ImsPublicIdentityRangesIsSet = true;
    } 
    if(j.find("msisdnRanges") != j.end())
    {
        j.at("msisdnRanges").get_to(o.m_MsisdnRanges);
        o.m_MsisdnRangesIsSet = true;
    } 
    if(j.find("externalGroupIdentifiersRanges") != j.end())
    {
        j.at("externalGroupIdentifiersRanges").get_to(o.m_ExternalGroupIdentifiersRanges);
        o.m_ExternalGroupIdentifiersRangesIsSet = true;
    } 
    
}

std::string HssInfo::getGroupId() const
{
    return m_GroupId;
}
void HssInfo::setGroupId(std::string const& value)
{
    m_GroupId = value;
    m_GroupIdIsSet = true;
}
bool HssInfo::groupIdIsSet() const
{
    return m_GroupIdIsSet;
}
void HssInfo::unsetGroupId()
{
    m_GroupIdIsSet = false;
}
std::vector<ImsiRange> HssInfo::getImsiRanges() const
{
    return m_ImsiRanges;
}
void HssInfo::setImsiRanges(std::vector<ImsiRange> const& value)
{
    m_ImsiRanges = value;
    m_ImsiRangesIsSet = true;
}
bool HssInfo::imsiRangesIsSet() const
{
    return m_ImsiRangesIsSet;
}
void HssInfo::unsetImsiRanges()
{
    m_ImsiRangesIsSet = false;
}
std::vector<IdentityRange> HssInfo::getImsPrivateIdentityRanges() const
{
    return m_ImsPrivateIdentityRanges;
}
void HssInfo::setImsPrivateIdentityRanges(std::vector<IdentityRange> const& value)
{
    m_ImsPrivateIdentityRanges = value;
    m_ImsPrivateIdentityRangesIsSet = true;
}
bool HssInfo::imsPrivateIdentityRangesIsSet() const
{
    return m_ImsPrivateIdentityRangesIsSet;
}
void HssInfo::unsetImsPrivateIdentityRanges()
{
    m_ImsPrivateIdentityRangesIsSet = false;
}
std::vector<IdentityRange> HssInfo::getImsPublicIdentityRanges() const
{
    return m_ImsPublicIdentityRanges;
}
void HssInfo::setImsPublicIdentityRanges(std::vector<IdentityRange> const& value)
{
    m_ImsPublicIdentityRanges = value;
    m_ImsPublicIdentityRangesIsSet = true;
}
bool HssInfo::imsPublicIdentityRangesIsSet() const
{
    return m_ImsPublicIdentityRangesIsSet;
}
void HssInfo::unsetImsPublicIdentityRanges()
{
    m_ImsPublicIdentityRangesIsSet = false;
}
std::vector<IdentityRange> HssInfo::getMsisdnRanges() const
{
    return m_MsisdnRanges;
}
void HssInfo::setMsisdnRanges(std::vector<IdentityRange> const& value)
{
    m_MsisdnRanges = value;
    m_MsisdnRangesIsSet = true;
}
bool HssInfo::msisdnRangesIsSet() const
{
    return m_MsisdnRangesIsSet;
}
void HssInfo::unsetMsisdnRanges()
{
    m_MsisdnRangesIsSet = false;
}
std::vector<IdentityRange> HssInfo::getExternalGroupIdentifiersRanges() const
{
    return m_ExternalGroupIdentifiersRanges;
}
void HssInfo::setExternalGroupIdentifiersRanges(std::vector<IdentityRange> const& value)
{
    m_ExternalGroupIdentifiersRanges = value;
    m_ExternalGroupIdentifiersRangesIsSet = true;
}
bool HssInfo::externalGroupIdentifiersRangesIsSet() const
{
    return m_ExternalGroupIdentifiersRangesIsSet;
}
void HssInfo::unsetExternalGroupIdentifiersRanges()
{
    m_ExternalGroupIdentifiersRangesIsSet = false;
}


} // namespace org::openapitools::server::model

