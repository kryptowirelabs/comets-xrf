/**
* NRF Bootstrapping
* NRF Bootstrapping. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.0-alpha.3
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BootstrappingInfo.h
 *
 * Information returned by NRF in the bootstrapping response message
 */

#ifndef BootstrappingInfo_H_
#define BootstrappingInfo_H_


#include "Status.h"
#include "LinksValueSchema.h"
#include <string>
#include <map>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Information returned by NRF in the bootstrapping response message
/// </summary>
class  BootstrappingInfo
{
public:
    BootstrappingInfo();
    virtual ~BootstrappingInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const BootstrappingInfo& rhs) const;
    bool operator!=(const BootstrappingInfo& rhs) const;

    /////////////////////////////////////////////
    /// BootstrappingInfo members

    /// <summary>
    /// 
    /// </summary>
    Status getStatus() const;
    void setStatus(Status const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Map of link objects where the keys are the link relations defined in 3GPP TS 29.510 clause 6.4.6.3.3
    /// </summary>
    std::map<std::string, LinksValueSchema> getLinks() const;
    void setLinks(std::map<std::string, LinksValueSchema> const& value);
    /// <summary>
    /// Map of features supported by the NRF, where the keys are the NRF services as defined in 3GPP TS 29.510 clause 6.1.6.3.11
    /// </summary>
    std::map<std::string, std::string> getNrfFeatures() const;
    void setNrfFeatures(std::map<std::string, std::string> const& value);
    bool nrfFeaturesIsSet() const;
    void unsetNrfFeatures();
    /// <summary>
    /// Map indicating whether the NRF requires Oauth2-based authorization for accessing its services. The key of the map shall be the name of an NRF service, e.g. \&quot;nnrf-nfm\&quot; or \&quot;nnrf-disc\&quot;
    /// </summary>
    std::map<std::string, bool> getOauth2Required() const;
    void setOauth2Required(std::map<std::string, bool> const value);
    bool oauth2RequiredIsSet() const;
    void unsetOauth2Required();

    friend void to_json(nlohmann::json& j, const BootstrappingInfo& o);
    friend void from_json(const nlohmann::json& j, BootstrappingInfo& o);
protected:
    Status m_Status;
    bool m_StatusIsSet;
    std::map<std::string, LinksValueSchema> m__links;

    std::map<std::string, std::string> m_NrfFeatures;
    bool m_NrfFeaturesIsSet;
    std::map<std::string, bool> m_Oauth2Required;
    bool m_Oauth2RequiredIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* BootstrappingInfo_H_ */
