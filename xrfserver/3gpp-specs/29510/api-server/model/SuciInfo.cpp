/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SuciInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SuciInfo::SuciInfo()
{
    m_RoutingIndsIsSet = false;
    m_HNwPubKeyIdsIsSet = false;
    
}

void SuciInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SuciInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SuciInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SuciInfo" : pathPrefix;

         
    if (routingIndsIsSet())
    {
        const std::vector<std::string>& value = m_RoutingInds;
        const std::string currentValuePath = _pathPrefix + ".routingInds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (hNwPubKeyIdsIsSet())
    {
        const std::vector<int32_t>& value = m_HNwPubKeyIds;
        const std::string currentValuePath = _pathPrefix + ".hNwPubKeyIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool SuciInfo::operator==(const SuciInfo& rhs) const
{
    return
    
    
    
    ((!routingIndsIsSet() && !rhs.routingIndsIsSet()) || (routingIndsIsSet() && rhs.routingIndsIsSet() && getRoutingInds() == rhs.getRoutingInds())) &&
    
    
    ((!hNwPubKeyIdsIsSet() && !rhs.hNwPubKeyIdsIsSet()) || (hNwPubKeyIdsIsSet() && rhs.hNwPubKeyIdsIsSet() && getHNwPubKeyIds() == rhs.getHNwPubKeyIds()))
    
    ;
}

bool SuciInfo::operator!=(const SuciInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SuciInfo& o)
{
    j = nlohmann::json();
    if(o.routingIndsIsSet() || !o.m_RoutingInds.empty())
        j["routingInds"] = o.m_RoutingInds;
    if(o.hNwPubKeyIdsIsSet() || !o.m_HNwPubKeyIds.empty())
        j["hNwPubKeyIds"] = o.m_HNwPubKeyIds;
    
}

void from_json(const nlohmann::json& j, SuciInfo& o)
{
    if(j.find("routingInds") != j.end())
    {
        j.at("routingInds").get_to(o.m_RoutingInds);
        o.m_RoutingIndsIsSet = true;
    } 
    if(j.find("hNwPubKeyIds") != j.end())
    {
        j.at("hNwPubKeyIds").get_to(o.m_HNwPubKeyIds);
        o.m_HNwPubKeyIdsIsSet = true;
    } 
    
}

std::vector<std::string> SuciInfo::getRoutingInds() const
{
    return m_RoutingInds;
}
void SuciInfo::setRoutingInds(std::vector<std::string> const& value)
{
    m_RoutingInds = value;
    m_RoutingIndsIsSet = true;
}
bool SuciInfo::routingIndsIsSet() const
{
    return m_RoutingIndsIsSet;
}
void SuciInfo::unsetRoutingInds()
{
    m_RoutingIndsIsSet = false;
}
std::vector<int32_t> SuciInfo::getHNwPubKeyIds() const
{
    return m_HNwPubKeyIds;
}
void SuciInfo::setHNwPubKeyIds(std::vector<int32_t> const value)
{
    m_HNwPubKeyIds = value;
    m_HNwPubKeyIdsIsSet = true;
}
bool SuciInfo::hNwPubKeyIdsIsSet() const
{
    return m_HNwPubKeyIdsIsSet;
}
void SuciInfo::unsetHNwPubKeyIds()
{
    m_HNwPubKeyIdsIsSet = false;
}


} // namespace org::openapitools::server::model

