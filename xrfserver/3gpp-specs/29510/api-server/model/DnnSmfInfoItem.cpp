/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DnnSmfInfoItem.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

DnnSmfInfoItem::DnnSmfInfoItem()
{
    m_DnaiListIsSet = false;
    
}

void DnnSmfInfoItem::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool DnnSmfInfoItem::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool DnnSmfInfoItem::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "DnnSmfInfoItem" : pathPrefix;

             
    if (dnaiListIsSet())
    {
        const std::vector<AnyOfstringstring>& value = m_DnaiList;
        const std::string currentValuePath = _pathPrefix + ".dnaiList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const AnyOfstringstring& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".dnaiList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool DnnSmfInfoItem::operator==(const DnnSmfInfoItem& rhs) const
{
    return
    
    
    (getDnn() == rhs.getDnn())
     &&
    
    
    ((!dnaiListIsSet() && !rhs.dnaiListIsSet()) || (dnaiListIsSet() && rhs.dnaiListIsSet() && getDnaiList() == rhs.getDnaiList()))
    
    ;
}

bool DnnSmfInfoItem::operator!=(const DnnSmfInfoItem& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DnnSmfInfoItem& o)
{
    j = nlohmann::json();
    j["dnn"] = o.m_Dnn;
    if(o.dnaiListIsSet() || !o.m_DnaiList.empty())
        j["dnaiList"] = o.m_DnaiList;
    
}

void from_json(const nlohmann::json& j, DnnSmfInfoItem& o)
{
    j.at("dnn").get_to(o.m_Dnn);
    if(j.find("dnaiList") != j.end())
    {
        j.at("dnaiList").get_to(o.m_DnaiList);
        o.m_DnaiListIsSet = true;
    } 
    
}

AnyOfstringstring DnnSmfInfoItem::getDnn() const
{
    return m_Dnn;
}
void DnnSmfInfoItem::setDnn(AnyOfstringstring const& value)
{
    m_Dnn = value;
}
std::vector<AnyOfstringstring> DnnSmfInfoItem::getDnaiList() const
{
    return m_DnaiList;
}
void DnnSmfInfoItem::setDnaiList(std::vector<AnyOfstringstring> const& value)
{
    m_DnaiList = value;
    m_DnaiListIsSet = true;
}
bool DnnSmfInfoItem::dnaiListIsSet() const
{
    return m_DnaiListIsSet;
}
void DnnSmfInfoItem::unsetDnaiList()
{
    m_DnaiListIsSet = false;
}


} // namespace org::openapitools::server::model

