/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TmgiRange.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TmgiRange::TmgiRange()
{
    m_MbsServiceIdStart = "";
    m_MbsServiceIdEnd = "";
    m_Nid = "";
    m_NidIsSet = false;
    
}

void TmgiRange::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TmgiRange::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TmgiRange::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TmgiRange" : pathPrefix;

         
    
    /* MbsServiceIdStart */ {
        const std::string& value = m_MbsServiceIdStart;
        const std::string currentValuePath = _pathPrefix + ".mbsServiceIdStart";
                
        

    }
         
    
    /* MbsServiceIdEnd */ {
        const std::string& value = m_MbsServiceIdEnd;
        const std::string currentValuePath = _pathPrefix + ".mbsServiceIdEnd";
                
        

    }
             
    if (nidIsSet())
    {
        const std::string& value = m_Nid;
        const std::string currentValuePath = _pathPrefix + ".nid";
                
        

    }
    
    return success;
}

bool TmgiRange::operator==(const TmgiRange& rhs) const
{
    return
    
    
    (getMbsServiceIdStart() == rhs.getMbsServiceIdStart())
     &&
    
    (getMbsServiceIdEnd() == rhs.getMbsServiceIdEnd())
     &&
    
    (getPlmnId() == rhs.getPlmnId())
     &&
    
    
    ((!nidIsSet() && !rhs.nidIsSet()) || (nidIsSet() && rhs.nidIsSet() && getNid() == rhs.getNid()))
    
    ;
}

bool TmgiRange::operator!=(const TmgiRange& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TmgiRange& o)
{
    j = nlohmann::json();
    j["mbsServiceIdStart"] = o.m_MbsServiceIdStart;
    j["mbsServiceIdEnd"] = o.m_MbsServiceIdEnd;
    j["plmnId"] = o.m_PlmnId;
    if(o.nidIsSet())
        j["nid"] = o.m_Nid;
    
}

void from_json(const nlohmann::json& j, TmgiRange& o)
{
    j.at("mbsServiceIdStart").get_to(o.m_MbsServiceIdStart);
    j.at("mbsServiceIdEnd").get_to(o.m_MbsServiceIdEnd);
    j.at("plmnId").get_to(o.m_PlmnId);
    if(j.find("nid") != j.end())
    {
        j.at("nid").get_to(o.m_Nid);
        o.m_NidIsSet = true;
    } 
    
}

std::string TmgiRange::getMbsServiceIdStart() const
{
    return m_MbsServiceIdStart;
}
void TmgiRange::setMbsServiceIdStart(std::string const& value)
{
    m_MbsServiceIdStart = value;
}
std::string TmgiRange::getMbsServiceIdEnd() const
{
    return m_MbsServiceIdEnd;
}
void TmgiRange::setMbsServiceIdEnd(std::string const& value)
{
    m_MbsServiceIdEnd = value;
}
PlmnId TmgiRange::getPlmnId() const
{
    return m_PlmnId;
}
void TmgiRange::setPlmnId(PlmnId const& value)
{
    m_PlmnId = value;
}
std::string TmgiRange::getNid() const
{
    return m_Nid;
}
void TmgiRange::setNid(std::string const& value)
{
    m_Nid = value;
    m_NidIsSet = true;
}
bool TmgiRange::nidIsSet() const
{
    return m_NidIsSet;
}
void TmgiRange::unsetNid()
{
    m_NidIsSet = false;
}


} // namespace org::openapitools::server::model

