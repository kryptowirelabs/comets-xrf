/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TsctsfInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TsctsfInfo::TsctsfInfo()
{
    m_SNssaiInfoListIsSet = false;
    m_ExternalGroupIdentifiersRangesIsSet = false;
    
}

void TsctsfInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TsctsfInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TsctsfInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TsctsfInfo" : pathPrefix;

         
    if (sNssaiInfoListIsSet())
    {
        const std::map<std::string, SnssaiTsctsfInfoItem>& value = m_SNssaiInfoList;
        const std::string currentValuePath = _pathPrefix + ".sNssaiInfoList";
                
        

    }
         
    if (externalGroupIdentifiersRangesIsSet())
    {
        const std::vector<IdentityRange>& value = m_ExternalGroupIdentifiersRanges;
        const std::string currentValuePath = _pathPrefix + ".externalGroupIdentifiersRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IdentityRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".externalGroupIdentifiersRanges") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool TsctsfInfo::operator==(const TsctsfInfo& rhs) const
{
    return
    
    
    
    ((!sNssaiInfoListIsSet() && !rhs.sNssaiInfoListIsSet()) || (sNssaiInfoListIsSet() && rhs.sNssaiInfoListIsSet() && getSNssaiInfoList() == rhs.getSNssaiInfoList())) &&
    
    
    ((!externalGroupIdentifiersRangesIsSet() && !rhs.externalGroupIdentifiersRangesIsSet()) || (externalGroupIdentifiersRangesIsSet() && rhs.externalGroupIdentifiersRangesIsSet() && getExternalGroupIdentifiersRanges() == rhs.getExternalGroupIdentifiersRanges()))
    
    ;
}

bool TsctsfInfo::operator!=(const TsctsfInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TsctsfInfo& o)
{
    j = nlohmann::json();
    if(o.sNssaiInfoListIsSet() || !o.m_SNssaiInfoList.empty())
        j["sNssaiInfoList"] = o.m_SNssaiInfoList;
    if(o.externalGroupIdentifiersRangesIsSet() || !o.m_ExternalGroupIdentifiersRanges.empty())
        j["externalGroupIdentifiersRanges"] = o.m_ExternalGroupIdentifiersRanges;
    
}

void from_json(const nlohmann::json& j, TsctsfInfo& o)
{
    if(j.find("sNssaiInfoList") != j.end())
    {
        j.at("sNssaiInfoList").get_to(o.m_SNssaiInfoList);
        o.m_SNssaiInfoListIsSet = true;
    } 
    if(j.find("externalGroupIdentifiersRanges") != j.end())
    {
        j.at("externalGroupIdentifiersRanges").get_to(o.m_ExternalGroupIdentifiersRanges);
        o.m_ExternalGroupIdentifiersRangesIsSet = true;
    } 
    
}

std::map<std::string, SnssaiTsctsfInfoItem> TsctsfInfo::getSNssaiInfoList() const
{
    return m_SNssaiInfoList;
}
void TsctsfInfo::setSNssaiInfoList(std::map<std::string, SnssaiTsctsfInfoItem> const& value)
{
    m_SNssaiInfoList = value;
    m_SNssaiInfoListIsSet = true;
}
bool TsctsfInfo::sNssaiInfoListIsSet() const
{
    return m_SNssaiInfoListIsSet;
}
void TsctsfInfo::unsetSNssaiInfoList()
{
    m_SNssaiInfoListIsSet = false;
}
std::vector<IdentityRange> TsctsfInfo::getExternalGroupIdentifiersRanges() const
{
    return m_ExternalGroupIdentifiersRanges;
}
void TsctsfInfo::setExternalGroupIdentifiersRanges(std::vector<IdentityRange> const& value)
{
    m_ExternalGroupIdentifiersRanges = value;
    m_ExternalGroupIdentifiersRangesIsSet = true;
}
bool TsctsfInfo::externalGroupIdentifiersRangesIsSet() const
{
    return m_ExternalGroupIdentifiersRangesIsSet;
}
void TsctsfInfo::unsetExternalGroupIdentifiersRanges()
{
    m_ExternalGroupIdentifiersRangesIsSet = false;
}


} // namespace org::openapitools::server::model

