/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MlAnalyticsInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

MlAnalyticsInfo::MlAnalyticsInfo()
{
    m_MlAnalyticsIdsIsSet = false;
    m_SnssaiListIsSet = false;
    m_TrackingAreaListIsSet = false;
    
}

void MlAnalyticsInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool MlAnalyticsInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool MlAnalyticsInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "MlAnalyticsInfo" : pathPrefix;

         
    if (mlAnalyticsIdsIsSet())
    {
        const std::vector<NwdafEvent>& value = m_MlAnalyticsIds;
        const std::string currentValuePath = _pathPrefix + ".mlAnalyticsIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const NwdafEvent& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".mlAnalyticsIds") && success;
 
                i++;
            }
        }

    }
         
    if (snssaiListIsSet())
    {
        const std::vector<Snssai>& value = m_SnssaiList;
        const std::string currentValuePath = _pathPrefix + ".snssaiList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Snssai& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".snssaiList") && success;
 
                i++;
            }
        }

    }
         
    if (trackingAreaListIsSet())
    {
        const std::vector<Tai>& value = m_TrackingAreaList;
        const std::string currentValuePath = _pathPrefix + ".trackingAreaList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Tai& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".trackingAreaList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool MlAnalyticsInfo::operator==(const MlAnalyticsInfo& rhs) const
{
    return
    
    
    
    ((!mlAnalyticsIdsIsSet() && !rhs.mlAnalyticsIdsIsSet()) || (mlAnalyticsIdsIsSet() && rhs.mlAnalyticsIdsIsSet() && getMlAnalyticsIds() == rhs.getMlAnalyticsIds())) &&
    
    
    ((!snssaiListIsSet() && !rhs.snssaiListIsSet()) || (snssaiListIsSet() && rhs.snssaiListIsSet() && getSnssaiList() == rhs.getSnssaiList())) &&
    
    
    ((!trackingAreaListIsSet() && !rhs.trackingAreaListIsSet()) || (trackingAreaListIsSet() && rhs.trackingAreaListIsSet() && getTrackingAreaList() == rhs.getTrackingAreaList()))
    
    ;
}

bool MlAnalyticsInfo::operator!=(const MlAnalyticsInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MlAnalyticsInfo& o)
{
    j = nlohmann::json();
    if(o.mlAnalyticsIdsIsSet() || !o.m_MlAnalyticsIds.empty())
        j["mlAnalyticsIds"] = o.m_MlAnalyticsIds;
    if(o.snssaiListIsSet() || !o.m_SnssaiList.empty())
        j["snssaiList"] = o.m_SnssaiList;
    if(o.trackingAreaListIsSet() || !o.m_TrackingAreaList.empty())
        j["trackingAreaList"] = o.m_TrackingAreaList;
    
}

void from_json(const nlohmann::json& j, MlAnalyticsInfo& o)
{
    if(j.find("mlAnalyticsIds") != j.end())
    {
        j.at("mlAnalyticsIds").get_to(o.m_MlAnalyticsIds);
        o.m_MlAnalyticsIdsIsSet = true;
    } 
    if(j.find("snssaiList") != j.end())
    {
        j.at("snssaiList").get_to(o.m_SnssaiList);
        o.m_SnssaiListIsSet = true;
    } 
    if(j.find("trackingAreaList") != j.end())
    {
        j.at("trackingAreaList").get_to(o.m_TrackingAreaList);
        o.m_TrackingAreaListIsSet = true;
    } 
    
}

std::vector<NwdafEvent> MlAnalyticsInfo::getMlAnalyticsIds() const
{
    return m_MlAnalyticsIds;
}
void MlAnalyticsInfo::setMlAnalyticsIds(std::vector<NwdafEvent> const& value)
{
    m_MlAnalyticsIds = value;
    m_MlAnalyticsIdsIsSet = true;
}
bool MlAnalyticsInfo::mlAnalyticsIdsIsSet() const
{
    return m_MlAnalyticsIdsIsSet;
}
void MlAnalyticsInfo::unsetMlAnalyticsIds()
{
    m_MlAnalyticsIdsIsSet = false;
}
std::vector<Snssai> MlAnalyticsInfo::getSnssaiList() const
{
    return m_SnssaiList;
}
void MlAnalyticsInfo::setSnssaiList(std::vector<Snssai> const& value)
{
    m_SnssaiList = value;
    m_SnssaiListIsSet = true;
}
bool MlAnalyticsInfo::snssaiListIsSet() const
{
    return m_SnssaiListIsSet;
}
void MlAnalyticsInfo::unsetSnssaiList()
{
    m_SnssaiListIsSet = false;
}
std::vector<Tai> MlAnalyticsInfo::getTrackingAreaList() const
{
    return m_TrackingAreaList;
}
void MlAnalyticsInfo::setTrackingAreaList(std::vector<Tai> const& value)
{
    m_TrackingAreaList = value;
    m_TrackingAreaListIsSet = true;
}
bool MlAnalyticsInfo::trackingAreaListIsSet() const
{
    return m_TrackingAreaListIsSet;
}
void MlAnalyticsInfo::unsetTrackingAreaList()
{
    m_TrackingAreaListIsSet = false;
}


} // namespace org::openapitools::server::model

