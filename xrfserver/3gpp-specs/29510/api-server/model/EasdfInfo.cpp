/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EasdfInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

EasdfInfo::EasdfInfo()
{
    m_SNssaiEasdfInfoListIsSet = false;
    m_EasdfN6IpAddressListIsSet = false;
    m_UpfN6IpAddressListIsSet = false;
    
}

void EasdfInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool EasdfInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool EasdfInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "EasdfInfo" : pathPrefix;

         
    if (sNssaiEasdfInfoListIsSet())
    {
        const std::vector<SnssaiEasdfInfoItem>& value = m_SNssaiEasdfInfoList;
        const std::string currentValuePath = _pathPrefix + ".sNssaiEasdfInfoList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const SnssaiEasdfInfoItem& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".sNssaiEasdfInfoList") && success;
 
                i++;
            }
        }

    }
         
    if (easdfN6IpAddressListIsSet())
    {
        const std::vector<IpAddr>& value = m_EasdfN6IpAddressList;
        const std::string currentValuePath = _pathPrefix + ".easdfN6IpAddressList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IpAddr& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".easdfN6IpAddressList") && success;
 
                i++;
            }
        }

    }
         
    if (upfN6IpAddressListIsSet())
    {
        const std::vector<IpAddr>& value = m_UpfN6IpAddressList;
        const std::string currentValuePath = _pathPrefix + ".upfN6IpAddressList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IpAddr& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".upfN6IpAddressList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool EasdfInfo::operator==(const EasdfInfo& rhs) const
{
    return
    
    
    
    ((!sNssaiEasdfInfoListIsSet() && !rhs.sNssaiEasdfInfoListIsSet()) || (sNssaiEasdfInfoListIsSet() && rhs.sNssaiEasdfInfoListIsSet() && getSNssaiEasdfInfoList() == rhs.getSNssaiEasdfInfoList())) &&
    
    
    ((!easdfN6IpAddressListIsSet() && !rhs.easdfN6IpAddressListIsSet()) || (easdfN6IpAddressListIsSet() && rhs.easdfN6IpAddressListIsSet() && getEasdfN6IpAddressList() == rhs.getEasdfN6IpAddressList())) &&
    
    
    ((!upfN6IpAddressListIsSet() && !rhs.upfN6IpAddressListIsSet()) || (upfN6IpAddressListIsSet() && rhs.upfN6IpAddressListIsSet() && getUpfN6IpAddressList() == rhs.getUpfN6IpAddressList()))
    
    ;
}

bool EasdfInfo::operator!=(const EasdfInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const EasdfInfo& o)
{
    j = nlohmann::json();
    if(o.sNssaiEasdfInfoListIsSet() || !o.m_SNssaiEasdfInfoList.empty())
        j["sNssaiEasdfInfoList"] = o.m_SNssaiEasdfInfoList;
    if(o.easdfN6IpAddressListIsSet() || !o.m_EasdfN6IpAddressList.empty())
        j["easdfN6IpAddressList"] = o.m_EasdfN6IpAddressList;
    if(o.upfN6IpAddressListIsSet() || !o.m_UpfN6IpAddressList.empty())
        j["upfN6IpAddressList"] = o.m_UpfN6IpAddressList;
    
}

void from_json(const nlohmann::json& j, EasdfInfo& o)
{
    if(j.find("sNssaiEasdfInfoList") != j.end())
    {
        j.at("sNssaiEasdfInfoList").get_to(o.m_SNssaiEasdfInfoList);
        o.m_SNssaiEasdfInfoListIsSet = true;
    } 
    if(j.find("easdfN6IpAddressList") != j.end())
    {
        j.at("easdfN6IpAddressList").get_to(o.m_EasdfN6IpAddressList);
        o.m_EasdfN6IpAddressListIsSet = true;
    } 
    if(j.find("upfN6IpAddressList") != j.end())
    {
        j.at("upfN6IpAddressList").get_to(o.m_UpfN6IpAddressList);
        o.m_UpfN6IpAddressListIsSet = true;
    } 
    
}

std::vector<SnssaiEasdfInfoItem> EasdfInfo::getSNssaiEasdfInfoList() const
{
    return m_SNssaiEasdfInfoList;
}
void EasdfInfo::setSNssaiEasdfInfoList(std::vector<SnssaiEasdfInfoItem> const& value)
{
    m_SNssaiEasdfInfoList = value;
    m_SNssaiEasdfInfoListIsSet = true;
}
bool EasdfInfo::sNssaiEasdfInfoListIsSet() const
{
    return m_SNssaiEasdfInfoListIsSet;
}
void EasdfInfo::unsetSNssaiEasdfInfoList()
{
    m_SNssaiEasdfInfoListIsSet = false;
}
std::vector<IpAddr> EasdfInfo::getEasdfN6IpAddressList() const
{
    return m_EasdfN6IpAddressList;
}
void EasdfInfo::setEasdfN6IpAddressList(std::vector<IpAddr> const& value)
{
    m_EasdfN6IpAddressList = value;
    m_EasdfN6IpAddressListIsSet = true;
}
bool EasdfInfo::easdfN6IpAddressListIsSet() const
{
    return m_EasdfN6IpAddressListIsSet;
}
void EasdfInfo::unsetEasdfN6IpAddressList()
{
    m_EasdfN6IpAddressListIsSet = false;
}
std::vector<IpAddr> EasdfInfo::getUpfN6IpAddressList() const
{
    return m_UpfN6IpAddressList;
}
void EasdfInfo::setUpfN6IpAddressList(std::vector<IpAddr> const& value)
{
    m_UpfN6IpAddressList = value;
    m_UpfN6IpAddressListIsSet = true;
}
bool EasdfInfo::upfN6IpAddressListIsSet() const
{
    return m_UpfN6IpAddressListIsSet;
}
void EasdfInfo::unsetUpfN6IpAddressList()
{
    m_UpfN6IpAddressListIsSet = false;
}


} // namespace org::openapitools::server::model

