/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TrustAfInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

TrustAfInfo::TrustAfInfo()
{
    m_SNssaiInfoListIsSet = false;
    m_AfEventsIsSet = false;
    m_AppIdsIsSet = false;
    m_InternalGroupIdIsSet = false;
    
}

void TrustAfInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool TrustAfInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TrustAfInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TrustAfInfo" : pathPrefix;

         
    if (sNssaiInfoListIsSet())
    {
        const std::vector<SnssaiInfoItem>& value = m_SNssaiInfoList;
        const std::string currentValuePath = _pathPrefix + ".sNssaiInfoList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const SnssaiInfoItem& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".sNssaiInfoList") && success;
 
                i++;
            }
        }

    }
         
    if (afEventsIsSet())
    {
        const std::vector<AfEvent>& value = m_AfEvents;
        const std::string currentValuePath = _pathPrefix + ".afEvents";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const AfEvent& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".afEvents") && success;
 
                i++;
            }
        }

    }
         
    if (appIdsIsSet())
    {
        const std::vector<std::string>& value = m_AppIds;
        const std::string currentValuePath = _pathPrefix + ".appIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (internalGroupIdIsSet())
    {
        const std::vector<std::string>& value = m_InternalGroupId;
        const std::string currentValuePath = _pathPrefix + ".internalGroupId";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool TrustAfInfo::operator==(const TrustAfInfo& rhs) const
{
    return
    
    
    
    ((!sNssaiInfoListIsSet() && !rhs.sNssaiInfoListIsSet()) || (sNssaiInfoListIsSet() && rhs.sNssaiInfoListIsSet() && getSNssaiInfoList() == rhs.getSNssaiInfoList())) &&
    
    
    ((!afEventsIsSet() && !rhs.afEventsIsSet()) || (afEventsIsSet() && rhs.afEventsIsSet() && getAfEvents() == rhs.getAfEvents())) &&
    
    
    ((!appIdsIsSet() && !rhs.appIdsIsSet()) || (appIdsIsSet() && rhs.appIdsIsSet() && getAppIds() == rhs.getAppIds())) &&
    
    
    ((!internalGroupIdIsSet() && !rhs.internalGroupIdIsSet()) || (internalGroupIdIsSet() && rhs.internalGroupIdIsSet() && getInternalGroupId() == rhs.getInternalGroupId()))
    
    ;
}

bool TrustAfInfo::operator!=(const TrustAfInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TrustAfInfo& o)
{
    j = nlohmann::json();
    if(o.sNssaiInfoListIsSet() || !o.m_SNssaiInfoList.empty())
        j["sNssaiInfoList"] = o.m_SNssaiInfoList;
    if(o.afEventsIsSet() || !o.m_AfEvents.empty())
        j["afEvents"] = o.m_AfEvents;
    if(o.appIdsIsSet() || !o.m_AppIds.empty())
        j["appIds"] = o.m_AppIds;
    if(o.internalGroupIdIsSet() || !o.m_InternalGroupId.empty())
        j["internalGroupId"] = o.m_InternalGroupId;
    
}

void from_json(const nlohmann::json& j, TrustAfInfo& o)
{
    if(j.find("sNssaiInfoList") != j.end())
    {
        j.at("sNssaiInfoList").get_to(o.m_SNssaiInfoList);
        o.m_SNssaiInfoListIsSet = true;
    } 
    if(j.find("afEvents") != j.end())
    {
        j.at("afEvents").get_to(o.m_AfEvents);
        o.m_AfEventsIsSet = true;
    } 
    if(j.find("appIds") != j.end())
    {
        j.at("appIds").get_to(o.m_AppIds);
        o.m_AppIdsIsSet = true;
    } 
    if(j.find("internalGroupId") != j.end())
    {
        j.at("internalGroupId").get_to(o.m_InternalGroupId);
        o.m_InternalGroupIdIsSet = true;
    } 
    
}

std::vector<SnssaiInfoItem> TrustAfInfo::getSNssaiInfoList() const
{
    return m_SNssaiInfoList;
}
void TrustAfInfo::setSNssaiInfoList(std::vector<SnssaiInfoItem> const& value)
{
    m_SNssaiInfoList = value;
    m_SNssaiInfoListIsSet = true;
}
bool TrustAfInfo::sNssaiInfoListIsSet() const
{
    return m_SNssaiInfoListIsSet;
}
void TrustAfInfo::unsetSNssaiInfoList()
{
    m_SNssaiInfoListIsSet = false;
}
std::vector<AfEvent> TrustAfInfo::getAfEvents() const
{
    return m_AfEvents;
}
void TrustAfInfo::setAfEvents(std::vector<AfEvent> const& value)
{
    m_AfEvents = value;
    m_AfEventsIsSet = true;
}
bool TrustAfInfo::afEventsIsSet() const
{
    return m_AfEventsIsSet;
}
void TrustAfInfo::unsetAfEvents()
{
    m_AfEventsIsSet = false;
}
std::vector<std::string> TrustAfInfo::getAppIds() const
{
    return m_AppIds;
}
void TrustAfInfo::setAppIds(std::vector<std::string> const& value)
{
    m_AppIds = value;
    m_AppIdsIsSet = true;
}
bool TrustAfInfo::appIdsIsSet() const
{
    return m_AppIdsIsSet;
}
void TrustAfInfo::unsetAppIds()
{
    m_AppIdsIsSet = false;
}
std::vector<std::string> TrustAfInfo::getInternalGroupId() const
{
    return m_InternalGroupId;
}
void TrustAfInfo::setInternalGroupId(std::vector<std::string> const& value)
{
    m_InternalGroupId = value;
    m_InternalGroupIdIsSet = true;
}
bool TrustAfInfo::internalGroupIdIsSet() const
{
    return m_InternalGroupIdIsSet;
}
void TrustAfInfo::unsetInternalGroupId()
{
    m_InternalGroupIdIsSet = false;
}


} // namespace org::openapitools::server::model

