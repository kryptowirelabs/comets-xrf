/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PcfInfo.h
 *
 * Information of a PCF NF Instance
 */

#ifndef PcfInfo_H_
#define PcfInfo_H_


#include "IdentityRange.h"
#include "SupiRange.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Information of a PCF NF Instance
/// </summary>
class  PcfInfo
{
public:
    PcfInfo();
    virtual ~PcfInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const PcfInfo& rhs) const;
    bool operator!=(const PcfInfo& rhs) const;

    /////////////////////////////////////////////
    /// PcfInfo members

    /// <summary>
    /// Identifier of a group of NFs.
    /// </summary>
    std::string getGroupId() const;
    void setGroupId(std::string const& value);
    bool groupIdIsSet() const;
    void unsetGroupId();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getDnnList() const;
    void setDnnList(std::vector<std::string> const& value);
    bool dnnListIsSet() const;
    void unsetDnnList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<SupiRange> getSupiRanges() const;
    void setSupiRanges(std::vector<SupiRange> const& value);
    bool supiRangesIsSet() const;
    void unsetSupiRanges();
    /// <summary>
    /// 
    /// </summary>
    std::vector<IdentityRange> getGpsiRanges() const;
    void setGpsiRanges(std::vector<IdentityRange> const& value);
    bool gpsiRangesIsSet() const;
    void unsetGpsiRanges();
    /// <summary>
    /// string containing an FQDN or realm as defined in RFC 6733.
    /// </summary>
    std::string getRxDiamHost() const;
    void setRxDiamHost(std::string const& value);
    bool rxDiamHostIsSet() const;
    void unsetRxDiamHost();
    /// <summary>
    /// string containing an FQDN or realm as defined in RFC 6733.
    /// </summary>
    std::string getRxDiamRealm() const;
    void setRxDiamRealm(std::string const& value);
    bool rxDiamRealmIsSet() const;
    void unsetRxDiamRealm();
    /// <summary>
    /// 
    /// </summary>
    bool isV2xSupportInd() const;
    void setV2xSupportInd(bool const value);
    bool v2xSupportIndIsSet() const;
    void unsetV2xSupportInd();
    /// <summary>
    /// 
    /// </summary>
    bool isProseSupportInd() const;
    void setProseSupportInd(bool const value);
    bool proseSupportIndIsSet() const;
    void unsetProseSupportInd();

    friend void to_json(nlohmann::json& j, const PcfInfo& o);
    friend void from_json(const nlohmann::json& j, PcfInfo& o);
protected:
    std::string m_GroupId;
    bool m_GroupIdIsSet;
    std::vector<std::string> m_DnnList;
    bool m_DnnListIsSet;
    std::vector<SupiRange> m_SupiRanges;
    bool m_SupiRangesIsSet;
    std::vector<IdentityRange> m_GpsiRanges;
    bool m_GpsiRangesIsSet;
    std::string m_RxDiamHost;
    bool m_RxDiamHostIsSet;
    std::string m_RxDiamRealm;
    bool m_RxDiamRealmIsSet;
    bool m_V2xSupportInd;
    bool m_V2xSupportIndIsSet;
    bool m_ProseSupportInd;
    bool m_ProseSupportIndIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* PcfInfo_H_ */
