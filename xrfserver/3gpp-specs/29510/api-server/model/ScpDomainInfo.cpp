/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ScpDomainInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ScpDomainInfo::ScpDomainInfo()
{
    m_ScpFqdn = "";
    m_ScpFqdnIsSet = false;
    m_ScpIpEndPointsIsSet = false;
    m_ScpPrefix = "";
    m_ScpPrefixIsSet = false;
    m_ScpPortsIsSet = false;
    
}

void ScpDomainInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ScpDomainInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ScpDomainInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ScpDomainInfo" : pathPrefix;

             
    if (scpIpEndPointsIsSet())
    {
        const std::vector<IpEndPoint>& value = m_ScpIpEndPoints;
        const std::string currentValuePath = _pathPrefix + ".scpIpEndPoints";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IpEndPoint& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".scpIpEndPoints") && success;
 
                i++;
            }
        }

    }
             
    if (scpPortsIsSet())
    {
        const std::map<std::string, int32_t>& value = m_ScpPorts;
        const std::string currentValuePath = _pathPrefix + ".scpPorts";
                
        

    }
    
    return success;
}

bool ScpDomainInfo::operator==(const ScpDomainInfo& rhs) const
{
    return
    
    
    
    ((!scpFqdnIsSet() && !rhs.scpFqdnIsSet()) || (scpFqdnIsSet() && rhs.scpFqdnIsSet() && getScpFqdn() == rhs.getScpFqdn())) &&
    
    
    ((!scpIpEndPointsIsSet() && !rhs.scpIpEndPointsIsSet()) || (scpIpEndPointsIsSet() && rhs.scpIpEndPointsIsSet() && getScpIpEndPoints() == rhs.getScpIpEndPoints())) &&
    
    
    ((!scpPrefixIsSet() && !rhs.scpPrefixIsSet()) || (scpPrefixIsSet() && rhs.scpPrefixIsSet() && getScpPrefix() == rhs.getScpPrefix())) &&
    
    
    ((!scpPortsIsSet() && !rhs.scpPortsIsSet()) || (scpPortsIsSet() && rhs.scpPortsIsSet() && getScpPorts() == rhs.getScpPorts()))
    
    ;
}

bool ScpDomainInfo::operator!=(const ScpDomainInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ScpDomainInfo& o)
{
    j = nlohmann::json();
    if(o.scpFqdnIsSet())
        j["scpFqdn"] = o.m_ScpFqdn;
    if(o.scpIpEndPointsIsSet() || !o.m_ScpIpEndPoints.empty())
        j["scpIpEndPoints"] = o.m_ScpIpEndPoints;
    if(o.scpPrefixIsSet())
        j["scpPrefix"] = o.m_ScpPrefix;
    if(o.scpPortsIsSet() || !o.m_ScpPorts.empty())
        j["scpPorts"] = o.m_ScpPorts;
    
}

void from_json(const nlohmann::json& j, ScpDomainInfo& o)
{
    if(j.find("scpFqdn") != j.end())
    {
        j.at("scpFqdn").get_to(o.m_ScpFqdn);
        o.m_ScpFqdnIsSet = true;
    } 
    if(j.find("scpIpEndPoints") != j.end())
    {
        j.at("scpIpEndPoints").get_to(o.m_ScpIpEndPoints);
        o.m_ScpIpEndPointsIsSet = true;
    } 
    if(j.find("scpPrefix") != j.end())
    {
        j.at("scpPrefix").get_to(o.m_ScpPrefix);
        o.m_ScpPrefixIsSet = true;
    } 
    if(j.find("scpPorts") != j.end())
    {
        j.at("scpPorts").get_to(o.m_ScpPorts);
        o.m_ScpPortsIsSet = true;
    } 
    
}

std::string ScpDomainInfo::getScpFqdn() const
{
    return m_ScpFqdn;
}
void ScpDomainInfo::setScpFqdn(std::string const& value)
{
    m_ScpFqdn = value;
    m_ScpFqdnIsSet = true;
}
bool ScpDomainInfo::scpFqdnIsSet() const
{
    return m_ScpFqdnIsSet;
}
void ScpDomainInfo::unsetScpFqdn()
{
    m_ScpFqdnIsSet = false;
}
std::vector<IpEndPoint> ScpDomainInfo::getScpIpEndPoints() const
{
    return m_ScpIpEndPoints;
}
void ScpDomainInfo::setScpIpEndPoints(std::vector<IpEndPoint> const& value)
{
    m_ScpIpEndPoints = value;
    m_ScpIpEndPointsIsSet = true;
}
bool ScpDomainInfo::scpIpEndPointsIsSet() const
{
    return m_ScpIpEndPointsIsSet;
}
void ScpDomainInfo::unsetScpIpEndPoints()
{
    m_ScpIpEndPointsIsSet = false;
}
std::string ScpDomainInfo::getScpPrefix() const
{
    return m_ScpPrefix;
}
void ScpDomainInfo::setScpPrefix(std::string const& value)
{
    m_ScpPrefix = value;
    m_ScpPrefixIsSet = true;
}
bool ScpDomainInfo::scpPrefixIsSet() const
{
    return m_ScpPrefixIsSet;
}
void ScpDomainInfo::unsetScpPrefix()
{
    m_ScpPrefixIsSet = false;
}
std::map<std::string, int32_t> ScpDomainInfo::getScpPorts() const
{
    return m_ScpPorts;
}
void ScpDomainInfo::setScpPorts(std::map<std::string, int32_t> const value)
{
    m_ScpPorts = value;
    m_ScpPortsIsSet = true;
}
bool ScpDomainInfo::scpPortsIsSet() const
{
    return m_ScpPortsIsSet;
}
void ScpDomainInfo::unsetScpPorts()
{
    m_ScpPortsIsSet = false;
}


} // namespace org::openapitools::server::model

