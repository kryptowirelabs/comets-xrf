/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MbUpfInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

MbUpfInfo::MbUpfInfo()
{
    m_MbSmfServingAreaIsSet = false;
    m_InterfaceMbUpfInfoListIsSet = false;
    m_TaiListIsSet = false;
    m_TaiRangeListIsSet = false;
    m_Priority = 0;
    m_PriorityIsSet = false;
    m_SupportedPfcpFeatures = "";
    m_SupportedPfcpFeaturesIsSet = false;
    
}

void MbUpfInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool MbUpfInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool MbUpfInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "MbUpfInfo" : pathPrefix;

         
    
    /* SNssaiMbUpfInfoList */ {
        const std::vector<SnssaiUpfInfoItem>& value = m_SNssaiMbUpfInfoList;
        const std::string currentValuePath = _pathPrefix + ".sNssaiMbUpfInfoList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const SnssaiUpfInfoItem& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".sNssaiMbUpfInfoList") && success;
 
                i++;
            }
        }

    }
         
    if (mbSmfServingAreaIsSet())
    {
        const std::vector<std::string>& value = m_MbSmfServingArea;
        const std::string currentValuePath = _pathPrefix + ".mbSmfServingArea";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (interfaceMbUpfInfoListIsSet())
    {
        const std::vector<InterfaceUpfInfoItem>& value = m_InterfaceMbUpfInfoList;
        const std::string currentValuePath = _pathPrefix + ".interfaceMbUpfInfoList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const InterfaceUpfInfoItem& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".interfaceMbUpfInfoList") && success;
 
                i++;
            }
        }

    }
         
    if (taiListIsSet())
    {
        const std::vector<Tai>& value = m_TaiList;
        const std::string currentValuePath = _pathPrefix + ".taiList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Tai& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".taiList") && success;
 
                i++;
            }
        }

    }
         
    if (taiRangeListIsSet())
    {
        const std::vector<TaiRange>& value = m_TaiRangeList;
        const std::string currentValuePath = _pathPrefix + ".taiRangeList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const TaiRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".taiRangeList") && success;
 
                i++;
            }
        }

    }
         
    if (priorityIsSet())
    {
        const int32_t& value = m_Priority;
        const std::string currentValuePath = _pathPrefix + ".priority";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 65535)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 65535;";
        }

    }
        
    return success;
}

bool MbUpfInfo::operator==(const MbUpfInfo& rhs) const
{
    return
    
    
    (getSNssaiMbUpfInfoList() == rhs.getSNssaiMbUpfInfoList())
     &&
    
    
    ((!mbSmfServingAreaIsSet() && !rhs.mbSmfServingAreaIsSet()) || (mbSmfServingAreaIsSet() && rhs.mbSmfServingAreaIsSet() && getMbSmfServingArea() == rhs.getMbSmfServingArea())) &&
    
    
    ((!interfaceMbUpfInfoListIsSet() && !rhs.interfaceMbUpfInfoListIsSet()) || (interfaceMbUpfInfoListIsSet() && rhs.interfaceMbUpfInfoListIsSet() && getInterfaceMbUpfInfoList() == rhs.getInterfaceMbUpfInfoList())) &&
    
    
    ((!taiListIsSet() && !rhs.taiListIsSet()) || (taiListIsSet() && rhs.taiListIsSet() && getTaiList() == rhs.getTaiList())) &&
    
    
    ((!taiRangeListIsSet() && !rhs.taiRangeListIsSet()) || (taiRangeListIsSet() && rhs.taiRangeListIsSet() && getTaiRangeList() == rhs.getTaiRangeList())) &&
    
    
    ((!priorityIsSet() && !rhs.priorityIsSet()) || (priorityIsSet() && rhs.priorityIsSet() && getPriority() == rhs.getPriority())) &&
    
    
    ((!supportedPfcpFeaturesIsSet() && !rhs.supportedPfcpFeaturesIsSet()) || (supportedPfcpFeaturesIsSet() && rhs.supportedPfcpFeaturesIsSet() && getSupportedPfcpFeatures() == rhs.getSupportedPfcpFeatures()))
    
    ;
}

bool MbUpfInfo::operator!=(const MbUpfInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MbUpfInfo& o)
{
    j = nlohmann::json();
    j["sNssaiMbUpfInfoList"] = o.m_SNssaiMbUpfInfoList;
    if(o.mbSmfServingAreaIsSet() || !o.m_MbSmfServingArea.empty())
        j["mbSmfServingArea"] = o.m_MbSmfServingArea;
    if(o.interfaceMbUpfInfoListIsSet() || !o.m_InterfaceMbUpfInfoList.empty())
        j["interfaceMbUpfInfoList"] = o.m_InterfaceMbUpfInfoList;
    if(o.taiListIsSet() || !o.m_TaiList.empty())
        j["taiList"] = o.m_TaiList;
    if(o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
        j["taiRangeList"] = o.m_TaiRangeList;
    if(o.priorityIsSet())
        j["priority"] = o.m_Priority;
    if(o.supportedPfcpFeaturesIsSet())
        j["supportedPfcpFeatures"] = o.m_SupportedPfcpFeatures;
    
}

void from_json(const nlohmann::json& j, MbUpfInfo& o)
{
    j.at("sNssaiMbUpfInfoList").get_to(o.m_SNssaiMbUpfInfoList);
    if(j.find("mbSmfServingArea") != j.end())
    {
        j.at("mbSmfServingArea").get_to(o.m_MbSmfServingArea);
        o.m_MbSmfServingAreaIsSet = true;
    } 
    if(j.find("interfaceMbUpfInfoList") != j.end())
    {
        j.at("interfaceMbUpfInfoList").get_to(o.m_InterfaceMbUpfInfoList);
        o.m_InterfaceMbUpfInfoListIsSet = true;
    } 
    if(j.find("taiList") != j.end())
    {
        j.at("taiList").get_to(o.m_TaiList);
        o.m_TaiListIsSet = true;
    } 
    if(j.find("taiRangeList") != j.end())
    {
        j.at("taiRangeList").get_to(o.m_TaiRangeList);
        o.m_TaiRangeListIsSet = true;
    } 
    if(j.find("priority") != j.end())
    {
        j.at("priority").get_to(o.m_Priority);
        o.m_PriorityIsSet = true;
    } 
    if(j.find("supportedPfcpFeatures") != j.end())
    {
        j.at("supportedPfcpFeatures").get_to(o.m_SupportedPfcpFeatures);
        o.m_SupportedPfcpFeaturesIsSet = true;
    } 
    
}

std::vector<SnssaiUpfInfoItem> MbUpfInfo::getSNssaiMbUpfInfoList() const
{
    return m_SNssaiMbUpfInfoList;
}
void MbUpfInfo::setSNssaiMbUpfInfoList(std::vector<SnssaiUpfInfoItem> const& value)
{
    m_SNssaiMbUpfInfoList = value;
}
std::vector<std::string> MbUpfInfo::getMbSmfServingArea() const
{
    return m_MbSmfServingArea;
}
void MbUpfInfo::setMbSmfServingArea(std::vector<std::string> const& value)
{
    m_MbSmfServingArea = value;
    m_MbSmfServingAreaIsSet = true;
}
bool MbUpfInfo::mbSmfServingAreaIsSet() const
{
    return m_MbSmfServingAreaIsSet;
}
void MbUpfInfo::unsetMbSmfServingArea()
{
    m_MbSmfServingAreaIsSet = false;
}
std::vector<InterfaceUpfInfoItem> MbUpfInfo::getInterfaceMbUpfInfoList() const
{
    return m_InterfaceMbUpfInfoList;
}
void MbUpfInfo::setInterfaceMbUpfInfoList(std::vector<InterfaceUpfInfoItem> const& value)
{
    m_InterfaceMbUpfInfoList = value;
    m_InterfaceMbUpfInfoListIsSet = true;
}
bool MbUpfInfo::interfaceMbUpfInfoListIsSet() const
{
    return m_InterfaceMbUpfInfoListIsSet;
}
void MbUpfInfo::unsetInterfaceMbUpfInfoList()
{
    m_InterfaceMbUpfInfoListIsSet = false;
}
std::vector<Tai> MbUpfInfo::getTaiList() const
{
    return m_TaiList;
}
void MbUpfInfo::setTaiList(std::vector<Tai> const& value)
{
    m_TaiList = value;
    m_TaiListIsSet = true;
}
bool MbUpfInfo::taiListIsSet() const
{
    return m_TaiListIsSet;
}
void MbUpfInfo::unsetTaiList()
{
    m_TaiListIsSet = false;
}
std::vector<TaiRange> MbUpfInfo::getTaiRangeList() const
{
    return m_TaiRangeList;
}
void MbUpfInfo::setTaiRangeList(std::vector<TaiRange> const& value)
{
    m_TaiRangeList = value;
    m_TaiRangeListIsSet = true;
}
bool MbUpfInfo::taiRangeListIsSet() const
{
    return m_TaiRangeListIsSet;
}
void MbUpfInfo::unsetTaiRangeList()
{
    m_TaiRangeListIsSet = false;
}
int32_t MbUpfInfo::getPriority() const
{
    return m_Priority;
}
void MbUpfInfo::setPriority(int32_t const value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}
bool MbUpfInfo::priorityIsSet() const
{
    return m_PriorityIsSet;
}
void MbUpfInfo::unsetPriority()
{
    m_PriorityIsSet = false;
}
std::string MbUpfInfo::getSupportedPfcpFeatures() const
{
    return m_SupportedPfcpFeatures;
}
void MbUpfInfo::setSupportedPfcpFeatures(std::string const& value)
{
    m_SupportedPfcpFeatures = value;
    m_SupportedPfcpFeaturesIsSet = true;
}
bool MbUpfInfo::supportedPfcpFeaturesIsSet() const
{
    return m_SupportedPfcpFeaturesIsSet;
}
void MbUpfInfo::unsetSupportedPfcpFeatures()
{
    m_SupportedPfcpFeaturesIsSet = false;
}


} // namespace org::openapitools::server::model

