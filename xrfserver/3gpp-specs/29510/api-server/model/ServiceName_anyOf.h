/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ServiceName_anyOf.h
 *
 * 
 */

#ifndef ServiceName_anyOf_H_
#define ServiceName_anyOf_H_


#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ServiceName_anyOf
{
public:
    ServiceName_anyOf();
    virtual ~ServiceName_anyOf() = default;

    enum class eServiceName_anyOf {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    NNRF_NFM, 
    NNRF_DISC, 
    NNRF_OAUTH2, 
    NUDM_SDM, 
    NUDM_UECM, 
    NUDM_UEAU, 
    NUDM_EE, 
    NUDM_PP, 
    NUDM_NIDDAU, 
    NUDM_MT, 
    NUDM_SSAU, 
    NAMF_COMM, 
    NAMF_EVTS, 
    NAMF_MT, 
    NAMF_LOC, 
    NAMF_MBS_COMM, 
    NAMF_MBS_BC, 
    NSMF_PDUSESSION, 
    NSMF_EVENT_EXPOSURE, 
    NSMF_NIDD, 
    NAUSF_AUTH, 
    NAUSF_SORPROTECTION, 
    NAUSF_UPUPROTECTION, 
    NNEF_PFDMANAGEMENT, 
    NNEF_SMCONTEXT, 
    NNEF_EVENTEXPOSURE, 
    _3GPP_CP_PARAMETER_PROVISIONING, 
    _3GPP_DEVICE_TRIGGERING, 
    _3GPP_APPLYING_BDT_POLICY, 
    _3GPP_TRAFFIC_INFLUENCE, 
    _3GPP_CHARGEABLE_PARTY, 
    _3GPP_AS_SESSION_WITH_QOS, 
    _3GPP_MSISDN_LESS_MO_SMS, 
    _3GPP_SERVICE_PARAMETER, 
    _3GPP_NIDD_CONFIGURATION_TRIGGER, 
    _3GPP_NIDD, 
    _3GPP_ANALYTICSEXPOSURE, 
    _3GPP_ECR_CONTROL, 
    _3GPP_MO_LCS_NOTIFY, 
    _3GPP_TIME_SYNC, 
    _3GPP_AM_INFLUENCE, 
    _3GPP_AM_POLICYAUTHORIZATION, 
    _3GPP_AKMA, 
    _3GPP_IPTVCONFIGURATION, 
    _3GPP_MBS_TMGI, 
    _3GPP_MBS_SESSION, 
    NPCF_AM_POLICY_CONTROL, 
    NPCF_SMPOLICYCONTROL, 
    NPCF_POLICYAUTHORIZATION, 
    NPCF_BDTPOLICYCONTROL, 
    NPCF_EVENTEXPOSURE, 
    NPCF_UE_POLICY_CONTROL, 
    NPCF_AM_POLICY_AUTHORIZATION, 
    NSMSF_SMS, 
    NNSSF_NSSELECTION, 
    NNSSF_NSSAIAVAILABILITY, 
    NUDR_DR, 
    NUDR_GROUP_ID_MAP, 
    NLMF_LOC, 
    N5G_EIR_EIC, 
    NBSF_MANAGEMENT, 
    NCHF_SPENDINGLIMITCONTROL, 
    NCHF_CONVERGEDCHARGING, 
    NCHF_OFFLINEONLYCHARGING, 
    NNWDAF_EVENTSSUBSCRIPTION, 
    NNWDAF_ANALYTICSINFO, 
    NNWDAF_DATAMANAGEMENT, 
    NNWDAF_MLMODELPROVISION, 
    NGMLC_LOC, 
    NUCMF_PROVISIONING, 
    NUCMF_UECAPABILITYMANAGEMENT, 
    NHSS_SDM, 
    NHSS_UECM, 
    NHSS_UEAU, 
    NHSS_EE, 
    NHSS_IMS_SDM, 
    NHSS_IMS_UECM, 
    NHSS_IMS_UEAU, 
    NHSS_GBA_SDM, 
    NHSS_GBA_UEAU, 
    NSEPP_TELESCOPIC, 
    NSORAF_SOR, 
    NSPAF_SECURED_PACKET, 
    NUDSF_DR, 
    NUDSF_TIMER, 
    NNSSAAF_NSSAA, 
    NAANF_AKMA, 
    N5GDDNMF_DISCOVERY, 
    NMFAF_3DADM, 
    NMFAF_3CADM, 
    NEASDF_DNSCONTEXT, 
    NEASDF_BASELINEDNSPATTERN, 
    NDCCF_DM, 
    NDCCF_CM, 
    NNSACF_NSAC, 
    NNSACF_SLICE_EE, 
    NMBSMF_TMGI, 
    NMBSMF_MBSSESSION, 
    NADRF_DM, 
    NBSP_GBA, 
    NTSCTSF_TIME_SYNC, 
    NTSCTSF_QOS_TSCAI
    };

    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ServiceName_anyOf& rhs) const;
    bool operator!=(const ServiceName_anyOf& rhs) const;

    /////////////////////////////////////////////
    /// ServiceName_anyOf members

    ServiceName_anyOf::eServiceName_anyOf getValue() const;
    void setValue(ServiceName_anyOf::eServiceName_anyOf value);
    
    friend void to_json(nlohmann::json& j, const ServiceName_anyOf& o);
    friend void from_json(const nlohmann::json& j, ServiceName_anyOf& o);
protected:
    ServiceName_anyOf::eServiceName_anyOf m_value = ServiceName_anyOf::eServiceName_anyOf::INVALID_VALUE_OPENAPI_GENERATED;
};

} // namespace org::openapitools::server::model

#endif /* ServiceName_anyOf_H_ */
