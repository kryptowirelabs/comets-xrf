/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DnnEasdfInfoItem.h
 *
 * Set of parameters supported by EASDF for a given DNN
 */

#ifndef DnnEasdfInfoItem_H_
#define DnnEasdfInfoItem_H_


#include "AnyOfstringstring.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Set of parameters supported by EASDF for a given DNN
/// </summary>
class  DnnEasdfInfoItem
{
public:
    DnnEasdfInfoItem();
    virtual ~DnnEasdfInfoItem() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const DnnEasdfInfoItem& rhs) const;
    bool operator!=(const DnnEasdfInfoItem& rhs) const;

    /////////////////////////////////////////////
    /// DnnEasdfInfoItem members

    /// <summary>
    /// 
    /// </summary>
    AnyOfstringstring getDnn() const;
    void setDnn(AnyOfstringstring const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getDnaiList() const;
    void setDnaiList(std::vector<std::string> const& value);
    bool dnaiListIsSet() const;
    void unsetDnaiList();

    friend void to_json(nlohmann::json& j, const DnnEasdfInfoItem& o);
    friend void from_json(const nlohmann::json& j, DnnEasdfInfoItem& o);
protected:
    AnyOfstringstring m_Dnn;

    std::vector<std::string> m_DnaiList;
    bool m_DnaiListIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* DnnEasdfInfoItem_H_ */
