/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NcgiTai.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NcgiTai::NcgiTai()
{
    
}

void NcgiTai::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NcgiTai::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NcgiTai::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NcgiTai" : pathPrefix;

             
    
    /* CellList */ {
        const std::vector<Ncgi>& value = m_CellList;
        const std::string currentValuePath = _pathPrefix + ".cellList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Ncgi& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".cellList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool NcgiTai::operator==(const NcgiTai& rhs) const
{
    return
    
    
    (getTai() == rhs.getTai())
     &&
    
    (getCellList() == rhs.getCellList())
    
    
    ;
}

bool NcgiTai::operator!=(const NcgiTai& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NcgiTai& o)
{
    j = nlohmann::json();
    j["tai"] = o.m_Tai;
    j["cellList"] = o.m_CellList;
    
}

void from_json(const nlohmann::json& j, NcgiTai& o)
{
    j.at("tai").get_to(o.m_Tai);
    j.at("cellList").get_to(o.m_CellList);
    
}

Tai NcgiTai::getTai() const
{
    return m_Tai;
}
void NcgiTai::setTai(Tai const& value)
{
    m_Tai = value;
}
std::vector<Ncgi> NcgiTai::getCellList() const
{
    return m_CellList;
}
void NcgiTai::setCellList(std::vector<Ncgi> const& value)
{
    m_CellList = value;
}


} // namespace org::openapitools::server::model

