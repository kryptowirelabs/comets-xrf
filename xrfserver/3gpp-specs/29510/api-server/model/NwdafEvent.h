/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NwdafEvent.h
 *
 * Possible values are - SLICE_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice - NETWORK_PERFORMANCE: Indicates that the event subscribed is network performance information. - NF_LOAD: Indicates that the event subscribed is load level and status of one or several Network Functions. - SERVICE_EXPERIENCE: Indicates that the event subscribed is service experience. - UE_MOBILITY: Indicates that the event subscribed is UE mobility information. - UE_COMMUNICATION: Indicates that the event subscribed is UE communication information. - QOS_SUSTAINABILITY: Indicates that the event subscribed is QoS sustainability. - ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal behaviour. - USER_DATA_CONGESTION: Indicates that the event subscribed is user data congestion information. - NSI_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice and the optionally associated Network Slice Instance - DN_PERFORMANCE: Indicates that the event subscribed is DN performance information. 
 */

#ifndef NwdafEvent_H_
#define NwdafEvent_H_


#include "NwdafEvent_anyOf.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Possible values are - SLICE_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice - NETWORK_PERFORMANCE: Indicates that the event subscribed is network performance information. - NF_LOAD: Indicates that the event subscribed is load level and status of one or several Network Functions. - SERVICE_EXPERIENCE: Indicates that the event subscribed is service experience. - UE_MOBILITY: Indicates that the event subscribed is UE mobility information. - UE_COMMUNICATION: Indicates that the event subscribed is UE communication information. - QOS_SUSTAINABILITY: Indicates that the event subscribed is QoS sustainability. - ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal behaviour. - USER_DATA_CONGESTION: Indicates that the event subscribed is user data congestion information. - NSI_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice and the optionally associated Network Slice Instance - DN_PERFORMANCE: Indicates that the event subscribed is DN performance information. 
/// </summary>
class  NwdafEvent
{
public:
    NwdafEvent();
    virtual ~NwdafEvent() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const NwdafEvent& rhs) const;
    bool operator!=(const NwdafEvent& rhs) const;

    /////////////////////////////////////////////
    /// NwdafEvent members


    NwdafEvent_anyOf getValue() const;
    void setValue(NwdafEvent_anyOf value);
    NwdafEvent_anyOf::eNwdafEvent_anyOf getEnumValue() const;
    void setEnumValue(NwdafEvent_anyOf::eNwdafEvent_anyOf value);
    friend void to_json(nlohmann::json& j, const NwdafEvent& o);
    friend void from_json(const nlohmann::json& j, NwdafEvent& o);
    friend void to_json(nlohmann::json& j, const NwdafEvent_anyOf& o);
    friend void from_json(const nlohmann::json& j, NwdafEvent_anyOf& o);
protected:
    NwdafEvent_anyOf m_value;
};

} // namespace org::openapitools::server::model

#endif /* NwdafEvent_H_ */
