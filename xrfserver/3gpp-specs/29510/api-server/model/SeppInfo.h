/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SeppInfo.h
 *
 * Information of a SEPP Instance
 */

#ifndef SeppInfo_H_
#define SeppInfo_H_


#include "PlmnId.h"
#include <map>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Information of a SEPP Instance
/// </summary>
class  SeppInfo
{
public:
    SeppInfo();
    virtual ~SeppInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const SeppInfo& rhs) const;
    bool operator!=(const SeppInfo& rhs) const;

    /////////////////////////////////////////////
    /// SeppInfo members

    /// <summary>
    /// Port numbers for HTTP and HTTPS. The key of the map shall be \&quot;http\&quot; or \&quot;https\&quot;
    /// </summary>
    std::map<std::string, int32_t> getSeppPorts() const;
    void setSeppPorts(std::map<std::string, int32_t> const value);
    bool seppPortsIsSet() const;
    void unsetSeppPorts();
    /// <summary>
    /// 
    /// </summary>
    std::vector<PlmnId> getRemotePlmnList() const;
    void setRemotePlmnList(std::vector<PlmnId> const& value);
    bool remotePlmnListIsSet() const;
    void unsetRemotePlmnList();

    friend void to_json(nlohmann::json& j, const SeppInfo& o);
    friend void from_json(const nlohmann::json& j, SeppInfo& o);
protected:
    std::map<std::string, int32_t> m_SeppPorts;
    bool m_SeppPortsIsSet;
    std::vector<PlmnId> m_RemotePlmnList;
    bool m_RemotePlmnListIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* SeppInfo_H_ */
