/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MfafInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

MfafInfo::MfafInfo()
{
    m_ServingNfTypeListIsSet = false;
    m_ServingNfSetIdListIsSet = false;
    m_TaiListIsSet = false;
    m_TaiRangeListIsSet = false;
    
}

void MfafInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool MfafInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool MfafInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "MfafInfo" : pathPrefix;

         
    if (servingNfTypeListIsSet())
    {
        const std::vector<NFType>& value = m_ServingNfTypeList;
        const std::string currentValuePath = _pathPrefix + ".servingNfTypeList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const NFType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".servingNfTypeList") && success;
 
                i++;
            }
        }

    }
         
    if (servingNfSetIdListIsSet())
    {
        const std::vector<std::string>& value = m_ServingNfSetIdList;
        const std::string currentValuePath = _pathPrefix + ".servingNfSetIdList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (taiListIsSet())
    {
        const std::vector<Tai>& value = m_TaiList;
        const std::string currentValuePath = _pathPrefix + ".taiList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Tai& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".taiList") && success;
 
                i++;
            }
        }

    }
         
    if (taiRangeListIsSet())
    {
        const std::vector<TaiRange>& value = m_TaiRangeList;
        const std::string currentValuePath = _pathPrefix + ".taiRangeList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const TaiRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".taiRangeList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool MfafInfo::operator==(const MfafInfo& rhs) const
{
    return
    
    
    
    ((!servingNfTypeListIsSet() && !rhs.servingNfTypeListIsSet()) || (servingNfTypeListIsSet() && rhs.servingNfTypeListIsSet() && getServingNfTypeList() == rhs.getServingNfTypeList())) &&
    
    
    ((!servingNfSetIdListIsSet() && !rhs.servingNfSetIdListIsSet()) || (servingNfSetIdListIsSet() && rhs.servingNfSetIdListIsSet() && getServingNfSetIdList() == rhs.getServingNfSetIdList())) &&
    
    
    ((!taiListIsSet() && !rhs.taiListIsSet()) || (taiListIsSet() && rhs.taiListIsSet() && getTaiList() == rhs.getTaiList())) &&
    
    
    ((!taiRangeListIsSet() && !rhs.taiRangeListIsSet()) || (taiRangeListIsSet() && rhs.taiRangeListIsSet() && getTaiRangeList() == rhs.getTaiRangeList()))
    
    ;
}

bool MfafInfo::operator!=(const MfafInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MfafInfo& o)
{
    j = nlohmann::json();
    if(o.servingNfTypeListIsSet() || !o.m_ServingNfTypeList.empty())
        j["servingNfTypeList"] = o.m_ServingNfTypeList;
    if(o.servingNfSetIdListIsSet() || !o.m_ServingNfSetIdList.empty())
        j["servingNfSetIdList"] = o.m_ServingNfSetIdList;
    if(o.taiListIsSet() || !o.m_TaiList.empty())
        j["taiList"] = o.m_TaiList;
    if(o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
        j["taiRangeList"] = o.m_TaiRangeList;
    
}

void from_json(const nlohmann::json& j, MfafInfo& o)
{
    if(j.find("servingNfTypeList") != j.end())
    {
        j.at("servingNfTypeList").get_to(o.m_ServingNfTypeList);
        o.m_ServingNfTypeListIsSet = true;
    } 
    if(j.find("servingNfSetIdList") != j.end())
    {
        j.at("servingNfSetIdList").get_to(o.m_ServingNfSetIdList);
        o.m_ServingNfSetIdListIsSet = true;
    } 
    if(j.find("taiList") != j.end())
    {
        j.at("taiList").get_to(o.m_TaiList);
        o.m_TaiListIsSet = true;
    } 
    if(j.find("taiRangeList") != j.end())
    {
        j.at("taiRangeList").get_to(o.m_TaiRangeList);
        o.m_TaiRangeListIsSet = true;
    } 
    
}

std::vector<NFType> MfafInfo::getServingNfTypeList() const
{
    return m_ServingNfTypeList;
}
void MfafInfo::setServingNfTypeList(std::vector<NFType> const& value)
{
    m_ServingNfTypeList = value;
    m_ServingNfTypeListIsSet = true;
}
bool MfafInfo::servingNfTypeListIsSet() const
{
    return m_ServingNfTypeListIsSet;
}
void MfafInfo::unsetServingNfTypeList()
{
    m_ServingNfTypeListIsSet = false;
}
std::vector<std::string> MfafInfo::getServingNfSetIdList() const
{
    return m_ServingNfSetIdList;
}
void MfafInfo::setServingNfSetIdList(std::vector<std::string> const& value)
{
    m_ServingNfSetIdList = value;
    m_ServingNfSetIdListIsSet = true;
}
bool MfafInfo::servingNfSetIdListIsSet() const
{
    return m_ServingNfSetIdListIsSet;
}
void MfafInfo::unsetServingNfSetIdList()
{
    m_ServingNfSetIdListIsSet = false;
}
std::vector<Tai> MfafInfo::getTaiList() const
{
    return m_TaiList;
}
void MfafInfo::setTaiList(std::vector<Tai> const& value)
{
    m_TaiList = value;
    m_TaiListIsSet = true;
}
bool MfafInfo::taiListIsSet() const
{
    return m_TaiListIsSet;
}
void MfafInfo::unsetTaiList()
{
    m_TaiListIsSet = false;
}
std::vector<TaiRange> MfafInfo::getTaiRangeList() const
{
    return m_TaiRangeList;
}
void MfafInfo::setTaiRangeList(std::vector<TaiRange> const& value)
{
    m_TaiRangeList = value;
    m_TaiRangeListIsSet = true;
}
bool MfafInfo::taiRangeListIsSet() const
{
    return m_TaiRangeListIsSet;
}
void MfafInfo::unsetTaiRangeList()
{
    m_TaiRangeListIsSet = false;
}


} // namespace org::openapitools::server::model

