/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PlmnSnssai.h
 *
 * List of network slices (S-NSSAIs) for a given PLMN ID
 */

#ifndef PlmnSnssai_H_
#define PlmnSnssai_H_


#include "ExtSnssai.h"
#include <string>
#include "PlmnId.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// List of network slices (S-NSSAIs) for a given PLMN ID
/// </summary>
class  PlmnSnssai
{
public:
    PlmnSnssai();
    virtual ~PlmnSnssai() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const PlmnSnssai& rhs) const;
    bool operator!=(const PlmnSnssai& rhs) const;

    /////////////////////////////////////////////
    /// PlmnSnssai members

    /// <summary>
    /// 
    /// </summary>
    PlmnId getPlmnId() const;
    void setPlmnId(PlmnId const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<ExtSnssai> getSNssaiList() const;
    void setSNssaiList(std::vector<ExtSnssai> const& value);
    /// <summary>
    /// This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).
    /// </summary>
    std::string getNid() const;
    void setNid(std::string const& value);
    bool nidIsSet() const;
    void unsetNid();

    friend void to_json(nlohmann::json& j, const PlmnSnssai& o);
    friend void from_json(const nlohmann::json& j, PlmnSnssai& o);
protected:
    PlmnId m_PlmnId;

    std::vector<ExtSnssai> m_SNssaiList;

    std::string m_Nid;
    bool m_NidIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* PlmnSnssai_H_ */
