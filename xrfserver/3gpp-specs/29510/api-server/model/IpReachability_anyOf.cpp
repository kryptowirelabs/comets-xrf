/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "IpReachability_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace org::openapitools::server::model
{

IpReachability_anyOf::IpReachability_anyOf()
{
    
}

void IpReachability_anyOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool IpReachability_anyOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool IpReachability_anyOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "IpReachability_anyOf" : pathPrefix;

    
    if (m_value == IpReachability_anyOf::eIpReachability_anyOf::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool IpReachability_anyOf::operator==(const IpReachability_anyOf& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool IpReachability_anyOf::operator!=(const IpReachability_anyOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const IpReachability_anyOf& o)
{
    j = nlohmann::json();
    
    switch (o.getValue())
    {
        case IpReachability_anyOf::eIpReachability_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case IpReachability_anyOf::eIpReachability_anyOf::IPV4:
            j = "IPV4";
            break;
        case IpReachability_anyOf::eIpReachability_anyOf::IPV6:
            j = "IPV6";
            break;
        case IpReachability_anyOf::eIpReachability_anyOf::IPV4V6:
            j = "IPV4V6";
            break;
    }
}

void from_json(const nlohmann::json& j, IpReachability_anyOf& o)
{
    
    auto s = j.get<std::string>();
    if (s == "IPV4") {
     o.setValue(IpReachability_anyOf::eIpReachability_anyOf::IPV4);
    } 
    else if (s == "IPV6") {
     o.setValue(IpReachability_anyOf::eIpReachability_anyOf::IPV6);
    } 
    else if (s == "IPV4V6") {
     o.setValue(IpReachability_anyOf::eIpReachability_anyOf::IPV4V6);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " IpReachability_anyOf::eIpReachability_anyOf";
     throw std::invalid_argument(ss.str());
    } 

}

IpReachability_anyOf::eIpReachability_anyOf IpReachability_anyOf::getValue() const
{
    return m_value;
}
void IpReachability_anyOf::setValue(IpReachability_anyOf::eIpReachability_anyOf value)
{
    m_value = value;
}

} // namespace org::openapitools::server::model

