/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NetworkSliceCond.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NetworkSliceCond::NetworkSliceCond()
{
    m_NsiListIsSet = false;
    
}

void NetworkSliceCond::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NetworkSliceCond::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NetworkSliceCond::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NetworkSliceCond" : pathPrefix;

         
    
    /* SnssaiList */ {
        const std::vector<Snssai>& value = m_SnssaiList;
        const std::string currentValuePath = _pathPrefix + ".snssaiList";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Snssai& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".snssaiList") && success;
 
                i++;
            }
        }

    }
         
    if (nsiListIsSet())
    {
        const std::vector<std::string>& value = m_NsiList;
        const std::string currentValuePath = _pathPrefix + ".nsiList";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool NetworkSliceCond::operator==(const NetworkSliceCond& rhs) const
{
    return
    
    
    (getSnssaiList() == rhs.getSnssaiList())
     &&
    
    
    ((!nsiListIsSet() && !rhs.nsiListIsSet()) || (nsiListIsSet() && rhs.nsiListIsSet() && getNsiList() == rhs.getNsiList()))
    
    ;
}

bool NetworkSliceCond::operator!=(const NetworkSliceCond& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NetworkSliceCond& o)
{
    j = nlohmann::json();
    j["snssaiList"] = o.m_SnssaiList;
    if(o.nsiListIsSet() || !o.m_NsiList.empty())
        j["nsiList"] = o.m_NsiList;
    
}

void from_json(const nlohmann::json& j, NetworkSliceCond& o)
{
    j.at("snssaiList").get_to(o.m_SnssaiList);
    if(j.find("nsiList") != j.end())
    {
        j.at("nsiList").get_to(o.m_NsiList);
        o.m_NsiListIsSet = true;
    } 
    
}

std::vector<Snssai> NetworkSliceCond::getSnssaiList() const
{
    return m_SnssaiList;
}
void NetworkSliceCond::setSnssaiList(std::vector<Snssai> const& value)
{
    m_SnssaiList = value;
}
std::vector<std::string> NetworkSliceCond::getNsiList() const
{
    return m_NsiList;
}
void NetworkSliceCond::setNsiList(std::vector<std::string> const& value)
{
    m_NsiList = value;
    m_NsiListIsSet = true;
}
bool NetworkSliceCond::nsiListIsSet() const
{
    return m_NsiListIsSet;
}
void NetworkSliceCond::unsetNsiList()
{
    m_NsiListIsSet = false;
}


} // namespace org::openapitools::server::model

