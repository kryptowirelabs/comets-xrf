/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NwdafCond.h
 *
 * Subscription to a set of NF Instances (NWDAFs), identified by Analytics ID(s), S-NSSAI(s) or NWDAF Serving Area information, i.e. list of TAIs for which the NWDAF can provide analytics.
 */

#ifndef NwdafCond_H_
#define NwdafCond_H_


#include "NFType.h"
#include "Tai.h"
#include <string>
#include "TaiRange.h"
#include "MlAnalyticsInfo.h"
#include "Snssai.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Subscription to a set of NF Instances (NWDAFs), identified by Analytics ID(s), S-NSSAI(s) or NWDAF Serving Area information, i.e. list of TAIs for which the NWDAF can provide analytics.
/// </summary>
class  NwdafCond
{
public:
    NwdafCond();
    virtual ~NwdafCond() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const NwdafCond& rhs) const;
    bool operator!=(const NwdafCond& rhs) const;

    /////////////////////////////////////////////
    /// NwdafCond members

    /// <summary>
    /// 
    /// </summary>
    std::string getConditionType() const;
    void setConditionType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getAnalyticsIds() const;
    void setAnalyticsIds(std::vector<std::string> const& value);
    bool analyticsIdsIsSet() const;
    void unsetAnalyticsIds();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Snssai> getSnssaiList() const;
    void setSnssaiList(std::vector<Snssai> const& value);
    bool snssaiListIsSet() const;
    void unsetSnssaiList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Tai> getTaiList() const;
    void setTaiList(std::vector<Tai> const& value);
    bool taiListIsSet() const;
    void unsetTaiList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<TaiRange> getTaiRangeList() const;
    void setTaiRangeList(std::vector<TaiRange> const& value);
    bool taiRangeListIsSet() const;
    void unsetTaiRangeList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<NFType> getServingNfTypeList() const;
    void setServingNfTypeList(std::vector<NFType> const& value);
    bool servingNfTypeListIsSet() const;
    void unsetServingNfTypeList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getServingNfSetIdList() const;
    void setServingNfSetIdList(std::vector<std::string> const& value);
    bool servingNfSetIdListIsSet() const;
    void unsetServingNfSetIdList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<MlAnalyticsInfo> getMlAnalyticsList() const;
    void setMlAnalyticsList(std::vector<MlAnalyticsInfo> const& value);
    bool mlAnalyticsListIsSet() const;
    void unsetMlAnalyticsList();

    friend void to_json(nlohmann::json& j, const NwdafCond& o);
    friend void from_json(const nlohmann::json& j, NwdafCond& o);
protected:
    std::string m_ConditionType;

    std::vector<std::string> m_AnalyticsIds;
    bool m_AnalyticsIdsIsSet;
    std::vector<Snssai> m_SnssaiList;
    bool m_SnssaiListIsSet;
    std::vector<Tai> m_TaiList;
    bool m_TaiListIsSet;
    std::vector<TaiRange> m_TaiRangeList;
    bool m_TaiRangeListIsSet;
    std::vector<NFType> m_ServingNfTypeList;
    bool m_ServingNfTypeListIsSet;
    std::vector<std::string> m_ServingNfSetIdList;
    bool m_ServingNfSetIdListIsSet;
    std::vector<MlAnalyticsInfo> m_MlAnalyticsList;
    bool m_MlAnalyticsListIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* NwdafCond_H_ */
