/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EasdfInfo.h
 *
 * Information of an EASDF NF Instance
 */

#ifndef EasdfInfo_H_
#define EasdfInfo_H_


#include "SnssaiEasdfInfoItem.h"
#include "IpAddr.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Information of an EASDF NF Instance
/// </summary>
class  EasdfInfo
{
public:
    EasdfInfo();
    virtual ~EasdfInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const EasdfInfo& rhs) const;
    bool operator!=(const EasdfInfo& rhs) const;

    /////////////////////////////////////////////
    /// EasdfInfo members

    /// <summary>
    /// 
    /// </summary>
    std::vector<SnssaiEasdfInfoItem> getSNssaiEasdfInfoList() const;
    void setSNssaiEasdfInfoList(std::vector<SnssaiEasdfInfoItem> const& value);
    bool sNssaiEasdfInfoListIsSet() const;
    void unsetSNssaiEasdfInfoList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<IpAddr> getEasdfN6IpAddressList() const;
    void setEasdfN6IpAddressList(std::vector<IpAddr> const& value);
    bool easdfN6IpAddressListIsSet() const;
    void unsetEasdfN6IpAddressList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<IpAddr> getUpfN6IpAddressList() const;
    void setUpfN6IpAddressList(std::vector<IpAddr> const& value);
    bool upfN6IpAddressListIsSet() const;
    void unsetUpfN6IpAddressList();

    friend void to_json(nlohmann::json& j, const EasdfInfo& o);
    friend void from_json(const nlohmann::json& j, EasdfInfo& o);
protected:
    std::vector<SnssaiEasdfInfoItem> m_SNssaiEasdfInfoList;
    bool m_SNssaiEasdfInfoListIsSet;
    std::vector<IpAddr> m_EasdfN6IpAddressList;
    bool m_EasdfN6IpAddressListIsSet;
    std::vector<IpAddr> m_UpfN6IpAddressList;
    bool m_UpfN6IpAddressListIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* EasdfInfo_H_ */
