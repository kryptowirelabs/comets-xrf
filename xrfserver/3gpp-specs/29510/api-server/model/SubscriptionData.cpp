/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SubscriptionData.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SubscriptionData::SubscriptionData()
{
    m_NfStatusNotificationUri = "";
    m_ReqNfInstanceId = "";
    m_ReqNfInstanceIdIsSet = false;
    m_SubscrCondIsSet = false;
    m_SubscriptionId = "";
    m_ValidityTime = "";
    m_ValidityTimeIsSet = false;
    m_ReqNotifEventsIsSet = false;
    m_PlmnIdIsSet = false;
    m_Nid = "";
    m_NidIsSet = false;
    m_NotifConditionIsSet = false;
    m_ReqNfTypeIsSet = false;
    m_ReqNfFqdn = "";
    m_ReqNfFqdnIsSet = false;
    m_ReqSnssaisIsSet = false;
    m_ReqPerPlmnSnssaisIsSet = false;
    m_ReqPlmnListIsSet = false;
    m_ReqSnpnListIsSet = false;
    m_ServingScopeIsSet = false;
    m_RequesterFeaturesIsSet = false;
    m_NrfSupportedFeaturesIsSet = false;
    m_HnrfUri = "";
    m_HnrfUriIsSet = false;
    
}

void SubscriptionData::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SubscriptionData::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SubscriptionData::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SubscriptionData" : pathPrefix;

                     
    
    /* SubscriptionId */ {
        const std::string& value = m_SubscriptionId;
        const std::string currentValuePath = _pathPrefix + ".subscriptionId";
                
        

    }
             
    if (reqNotifEventsIsSet())
    {
        const std::vector<NotificationEventType>& value = m_ReqNotifEvents;
        const std::string currentValuePath = _pathPrefix + ".reqNotifEvents";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const NotificationEventType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".reqNotifEvents") && success;
 
                i++;
            }
        }

    }
             
    if (nidIsSet())
    {
        const std::string& value = m_Nid;
        const std::string currentValuePath = _pathPrefix + ".nid";
                
        

    }
                     
    if (reqSnssaisIsSet())
    {
        const std::vector<Snssai>& value = m_ReqSnssais;
        const std::string currentValuePath = _pathPrefix + ".reqSnssais";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Snssai& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".reqSnssais") && success;
 
                i++;
            }
        }

    }
         
    if (reqPerPlmnSnssaisIsSet())
    {
        const std::vector<PlmnSnssai>& value = m_ReqPerPlmnSnssais;
        const std::string currentValuePath = _pathPrefix + ".reqPerPlmnSnssais";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const PlmnSnssai& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".reqPerPlmnSnssais") && success;
 
                i++;
            }
        }

    }
         
    if (reqPlmnListIsSet())
    {
        const std::vector<PlmnId>& value = m_ReqPlmnList;
        const std::string currentValuePath = _pathPrefix + ".reqPlmnList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const PlmnId& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".reqPlmnList") && success;
 
                i++;
            }
        }

    }
         
    if (reqSnpnListIsSet())
    {
        const std::vector<PlmnIdNid>& value = m_ReqSnpnList;
        const std::string currentValuePath = _pathPrefix + ".reqSnpnList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const PlmnIdNid& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".reqSnpnList") && success;
 
                i++;
            }
        }

    }
         
    if (servingScopeIsSet())
    {
        const std::vector<std::string>& value = m_ServingScope;
        const std::string currentValuePath = _pathPrefix + ".servingScope";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                
    return success;
}

bool SubscriptionData::operator==(const SubscriptionData& rhs) const
{
    return
    
    
    (getNfStatusNotificationUri() == rhs.getNfStatusNotificationUri())
     &&
    
    
    ((!reqNfInstanceIdIsSet() && !rhs.reqNfInstanceIdIsSet()) || (reqNfInstanceIdIsSet() && rhs.reqNfInstanceIdIsSet() && getReqNfInstanceId() == rhs.getReqNfInstanceId())) &&
    
    
    ((!subscrCondIsSet() && !rhs.subscrCondIsSet()) || (subscrCondIsSet() && rhs.subscrCondIsSet() && getSubscrCond() == rhs.getSubscrCond())) &&
    
    (getSubscriptionId() == rhs.getSubscriptionId())
     &&
    
    
    ((!validityTimeIsSet() && !rhs.validityTimeIsSet()) || (validityTimeIsSet() && rhs.validityTimeIsSet() && getValidityTime() == rhs.getValidityTime())) &&
    
    
    ((!reqNotifEventsIsSet() && !rhs.reqNotifEventsIsSet()) || (reqNotifEventsIsSet() && rhs.reqNotifEventsIsSet() && getReqNotifEvents() == rhs.getReqNotifEvents())) &&
    
    
    ((!plmnIdIsSet() && !rhs.plmnIdIsSet()) || (plmnIdIsSet() && rhs.plmnIdIsSet() && getPlmnId() == rhs.getPlmnId())) &&
    
    
    ((!nidIsSet() && !rhs.nidIsSet()) || (nidIsSet() && rhs.nidIsSet() && getNid() == rhs.getNid())) &&
    
    
    ((!notifConditionIsSet() && !rhs.notifConditionIsSet()) || (notifConditionIsSet() && rhs.notifConditionIsSet() && getNotifCondition() == rhs.getNotifCondition())) &&
    
    
    ((!reqNfTypeIsSet() && !rhs.reqNfTypeIsSet()) || (reqNfTypeIsSet() && rhs.reqNfTypeIsSet() && getReqNfType() == rhs.getReqNfType())) &&
    
    
    ((!reqNfFqdnIsSet() && !rhs.reqNfFqdnIsSet()) || (reqNfFqdnIsSet() && rhs.reqNfFqdnIsSet() && getReqNfFqdn() == rhs.getReqNfFqdn())) &&
    
    
    ((!reqSnssaisIsSet() && !rhs.reqSnssaisIsSet()) || (reqSnssaisIsSet() && rhs.reqSnssaisIsSet() && getReqSnssais() == rhs.getReqSnssais())) &&
    
    
    ((!reqPerPlmnSnssaisIsSet() && !rhs.reqPerPlmnSnssaisIsSet()) || (reqPerPlmnSnssaisIsSet() && rhs.reqPerPlmnSnssaisIsSet() && getReqPerPlmnSnssais() == rhs.getReqPerPlmnSnssais())) &&
    
    
    ((!reqPlmnListIsSet() && !rhs.reqPlmnListIsSet()) || (reqPlmnListIsSet() && rhs.reqPlmnListIsSet() && getReqPlmnList() == rhs.getReqPlmnList())) &&
    
    
    ((!reqSnpnListIsSet() && !rhs.reqSnpnListIsSet()) || (reqSnpnListIsSet() && rhs.reqSnpnListIsSet() && getReqSnpnList() == rhs.getReqSnpnList())) &&
    
    
    ((!servingScopeIsSet() && !rhs.servingScopeIsSet()) || (servingScopeIsSet() && rhs.servingScopeIsSet() && getServingScope() == rhs.getServingScope())) &&
    
    
    ((!requesterFeaturesIsSet() && !rhs.requesterFeaturesIsSet()) || (requesterFeaturesIsSet() && rhs.requesterFeaturesIsSet() && getRequesterFeatures() == rhs.getRequesterFeatures())) &&
    
    
    ((!nrfSupportedFeaturesIsSet() && !rhs.nrfSupportedFeaturesIsSet()) || (nrfSupportedFeaturesIsSet() && rhs.nrfSupportedFeaturesIsSet() && getNrfSupportedFeatures() == rhs.getNrfSupportedFeatures())) &&
    
    
    ((!hnrfUriIsSet() && !rhs.hnrfUriIsSet()) || (hnrfUriIsSet() && rhs.hnrfUriIsSet() && getHnrfUri() == rhs.getHnrfUri()))
    
    ;
}

bool SubscriptionData::operator!=(const SubscriptionData& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SubscriptionData& o)
{
    j = nlohmann::json();
    j["nfStatusNotificationUri"] = o.m_NfStatusNotificationUri;
    if(o.reqNfInstanceIdIsSet())
        j["reqNfInstanceId"] = o.m_ReqNfInstanceId;
    if(o.subscrCondIsSet())
        j["subscrCond"] = o.m_SubscrCond;
    j["subscriptionId"] = o.m_SubscriptionId;
    if(o.validityTimeIsSet())
        j["validityTime"] = o.m_ValidityTime;
    if(o.reqNotifEventsIsSet() || !o.m_ReqNotifEvents.empty())
        j["reqNotifEvents"] = o.m_ReqNotifEvents;
    if(o.plmnIdIsSet())
        j["plmnId"] = o.m_PlmnId;
    if(o.nidIsSet())
        j["nid"] = o.m_Nid;
    if(o.notifConditionIsSet())
        j["notifCondition"] = o.m_NotifCondition;
    if(o.reqNfTypeIsSet())
        j["reqNfType"] = o.m_ReqNfType;
    if(o.reqNfFqdnIsSet())
        j["reqNfFqdn"] = o.m_ReqNfFqdn;
    if(o.reqSnssaisIsSet() || !o.m_ReqSnssais.empty())
        j["reqSnssais"] = o.m_ReqSnssais;
    if(o.reqPerPlmnSnssaisIsSet() || !o.m_ReqPerPlmnSnssais.empty())
        j["reqPerPlmnSnssais"] = o.m_ReqPerPlmnSnssais;
    if(o.reqPlmnListIsSet() || !o.m_ReqPlmnList.empty())
        j["reqPlmnList"] = o.m_ReqPlmnList;
    if(o.reqSnpnListIsSet() || !o.m_ReqSnpnList.empty())
        j["reqSnpnList"] = o.m_ReqSnpnList;
    if(o.servingScopeIsSet() || !o.m_ServingScope.empty())
        j["servingScope"] = o.m_ServingScope;
    if(o.requesterFeaturesIsSet())
        j["requesterFeatures"] = o.m_RequesterFeatures;
    if(o.nrfSupportedFeaturesIsSet())
        j["nrfSupportedFeatures"] = o.m_NrfSupportedFeatures;
    if(o.hnrfUriIsSet())
        j["hnrfUri"] = o.m_HnrfUri;
    
}

void from_json(const nlohmann::json& j, SubscriptionData& o)
{
    j.at("nfStatusNotificationUri").get_to(o.m_NfStatusNotificationUri);
    if(j.find("reqNfInstanceId") != j.end())
    {
        j.at("reqNfInstanceId").get_to(o.m_ReqNfInstanceId);
        o.m_ReqNfInstanceIdIsSet = true;
    } 
    if(j.find("subscrCond") != j.end())
    {
        j.at("subscrCond").get_to(o.m_SubscrCond);
        o.m_SubscrCondIsSet = true;
    } 
    j.at("subscriptionId").get_to(o.m_SubscriptionId);
    if(j.find("validityTime") != j.end())
    {
        j.at("validityTime").get_to(o.m_ValidityTime);
        o.m_ValidityTimeIsSet = true;
    } 
    if(j.find("reqNotifEvents") != j.end())
    {
        j.at("reqNotifEvents").get_to(o.m_ReqNotifEvents);
        o.m_ReqNotifEventsIsSet = true;
    } 
    if(j.find("plmnId") != j.end())
    {
        j.at("plmnId").get_to(o.m_PlmnId);
        o.m_PlmnIdIsSet = true;
    } 
    if(j.find("nid") != j.end())
    {
        j.at("nid").get_to(o.m_Nid);
        o.m_NidIsSet = true;
    } 
    if(j.find("notifCondition") != j.end())
    {
        j.at("notifCondition").get_to(o.m_NotifCondition);
        o.m_NotifConditionIsSet = true;
    } 
    if(j.find("reqNfType") != j.end())
    {
        j.at("reqNfType").get_to(o.m_ReqNfType);
        o.m_ReqNfTypeIsSet = true;
    } 
    if(j.find("reqNfFqdn") != j.end())
    {
        j.at("reqNfFqdn").get_to(o.m_ReqNfFqdn);
        o.m_ReqNfFqdnIsSet = true;
    } 
    if(j.find("reqSnssais") != j.end())
    {
        j.at("reqSnssais").get_to(o.m_ReqSnssais);
        o.m_ReqSnssaisIsSet = true;
    } 
    if(j.find("reqPerPlmnSnssais") != j.end())
    {
        j.at("reqPerPlmnSnssais").get_to(o.m_ReqPerPlmnSnssais);
        o.m_ReqPerPlmnSnssaisIsSet = true;
    } 
    if(j.find("reqPlmnList") != j.end())
    {
        j.at("reqPlmnList").get_to(o.m_ReqPlmnList);
        o.m_ReqPlmnListIsSet = true;
    } 
    if(j.find("reqSnpnList") != j.end())
    {
        j.at("reqSnpnList").get_to(o.m_ReqSnpnList);
        o.m_ReqSnpnListIsSet = true;
    } 
    if(j.find("servingScope") != j.end())
    {
        j.at("servingScope").get_to(o.m_ServingScope);
        o.m_ServingScopeIsSet = true;
    } 
    if(j.find("requesterFeatures") != j.end())
    {
        j.at("requesterFeatures").get_to(o.m_RequesterFeatures);
        o.m_RequesterFeaturesIsSet = true;
    } 
    if(j.find("nrfSupportedFeatures") != j.end())
    {
        j.at("nrfSupportedFeatures").get_to(o.m_NrfSupportedFeatures);
        o.m_NrfSupportedFeaturesIsSet = true;
    } 
    if(j.find("hnrfUri") != j.end())
    {
        j.at("hnrfUri").get_to(o.m_HnrfUri);
        o.m_HnrfUriIsSet = true;
    } 
    
}

std::string SubscriptionData::getNfStatusNotificationUri() const
{
    return m_NfStatusNotificationUri;
}
void SubscriptionData::setNfStatusNotificationUri(std::string const& value)
{
    m_NfStatusNotificationUri = value;
}
std::string SubscriptionData::getReqNfInstanceId() const
{
    return m_ReqNfInstanceId;
}
void SubscriptionData::setReqNfInstanceId(std::string const& value)
{
    m_ReqNfInstanceId = value;
    m_ReqNfInstanceIdIsSet = true;
}
bool SubscriptionData::reqNfInstanceIdIsSet() const
{
    return m_ReqNfInstanceIdIsSet;
}
void SubscriptionData::unsetReqNfInstanceId()
{
    m_ReqNfInstanceIdIsSet = false;
}
OneOfNfInstanceIdCondNfInstanceIdListCondNfTypeCondServiceNameCondServiceNameListCondAmfCondGuamiListCondNetworkSliceCondNfGroupCondNfGroupListCondNfSetCondNfServiceSetCondUpfCondScpDomainCondNwdafCondNefCondDccfCond SubscriptionData::getSubscrCond() const
{
    return m_SubscrCond;
}
void SubscriptionData::setSubscrCond(OneOfNfInstanceIdCondNfInstanceIdListCondNfTypeCondServiceNameCondServiceNameListCondAmfCondGuamiListCondNetworkSliceCondNfGroupCondNfGroupListCondNfSetCondNfServiceSetCondUpfCondScpDomainCondNwdafCondNefCondDccfCond const& value)
{
    m_SubscrCond = value;
    m_SubscrCondIsSet = true;
}
bool SubscriptionData::subscrCondIsSet() const
{
    return m_SubscrCondIsSet;
}
void SubscriptionData::unsetSubscrCond()
{
    m_SubscrCondIsSet = false;
}
std::string SubscriptionData::getSubscriptionId() const
{
    return m_SubscriptionId;
}
void SubscriptionData::setSubscriptionId(std::string const& value)
{
    m_SubscriptionId = value;
}
std::string SubscriptionData::getValidityTime() const
{
    return m_ValidityTime;
}
void SubscriptionData::setValidityTime(std::string const& value)
{
    m_ValidityTime = value;
    m_ValidityTimeIsSet = true;
}
bool SubscriptionData::validityTimeIsSet() const
{
    return m_ValidityTimeIsSet;
}
void SubscriptionData::unsetValidityTime()
{
    m_ValidityTimeIsSet = false;
}
std::vector<NotificationEventType> SubscriptionData::getReqNotifEvents() const
{
    return m_ReqNotifEvents;
}
void SubscriptionData::setReqNotifEvents(std::vector<NotificationEventType> const& value)
{
    m_ReqNotifEvents = value;
    m_ReqNotifEventsIsSet = true;
}
bool SubscriptionData::reqNotifEventsIsSet() const
{
    return m_ReqNotifEventsIsSet;
}
void SubscriptionData::unsetReqNotifEvents()
{
    m_ReqNotifEventsIsSet = false;
}
PlmnId SubscriptionData::getPlmnId() const
{
    return m_PlmnId;
}
void SubscriptionData::setPlmnId(PlmnId const& value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}
bool SubscriptionData::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}
void SubscriptionData::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
std::string SubscriptionData::getNid() const
{
    return m_Nid;
}
void SubscriptionData::setNid(std::string const& value)
{
    m_Nid = value;
    m_NidIsSet = true;
}
bool SubscriptionData::nidIsSet() const
{
    return m_NidIsSet;
}
void SubscriptionData::unsetNid()
{
    m_NidIsSet = false;
}
NotifCondition SubscriptionData::getNotifCondition() const
{
    return m_NotifCondition;
}
void SubscriptionData::setNotifCondition(NotifCondition const& value)
{
    m_NotifCondition = value;
    m_NotifConditionIsSet = true;
}
bool SubscriptionData::notifConditionIsSet() const
{
    return m_NotifConditionIsSet;
}
void SubscriptionData::unsetNotifCondition()
{
    m_NotifConditionIsSet = false;
}
NFType SubscriptionData::getReqNfType() const
{
    return m_ReqNfType;
}
void SubscriptionData::setReqNfType(NFType const& value)
{
    m_ReqNfType = value;
    m_ReqNfTypeIsSet = true;
}
bool SubscriptionData::reqNfTypeIsSet() const
{
    return m_ReqNfTypeIsSet;
}
void SubscriptionData::unsetReqNfType()
{
    m_ReqNfTypeIsSet = false;
}
std::string SubscriptionData::getReqNfFqdn() const
{
    return m_ReqNfFqdn;
}
void SubscriptionData::setReqNfFqdn(std::string const& value)
{
    m_ReqNfFqdn = value;
    m_ReqNfFqdnIsSet = true;
}
bool SubscriptionData::reqNfFqdnIsSet() const
{
    return m_ReqNfFqdnIsSet;
}
void SubscriptionData::unsetReqNfFqdn()
{
    m_ReqNfFqdnIsSet = false;
}
std::vector<Snssai> SubscriptionData::getReqSnssais() const
{
    return m_ReqSnssais;
}
void SubscriptionData::setReqSnssais(std::vector<Snssai> const& value)
{
    m_ReqSnssais = value;
    m_ReqSnssaisIsSet = true;
}
bool SubscriptionData::reqSnssaisIsSet() const
{
    return m_ReqSnssaisIsSet;
}
void SubscriptionData::unsetReqSnssais()
{
    m_ReqSnssaisIsSet = false;
}
std::vector<PlmnSnssai> SubscriptionData::getReqPerPlmnSnssais() const
{
    return m_ReqPerPlmnSnssais;
}
void SubscriptionData::setReqPerPlmnSnssais(std::vector<PlmnSnssai> const& value)
{
    m_ReqPerPlmnSnssais = value;
    m_ReqPerPlmnSnssaisIsSet = true;
}
bool SubscriptionData::reqPerPlmnSnssaisIsSet() const
{
    return m_ReqPerPlmnSnssaisIsSet;
}
void SubscriptionData::unsetReqPerPlmnSnssais()
{
    m_ReqPerPlmnSnssaisIsSet = false;
}
std::vector<PlmnId> SubscriptionData::getReqPlmnList() const
{
    return m_ReqPlmnList;
}
void SubscriptionData::setReqPlmnList(std::vector<PlmnId> const& value)
{
    m_ReqPlmnList = value;
    m_ReqPlmnListIsSet = true;
}
bool SubscriptionData::reqPlmnListIsSet() const
{
    return m_ReqPlmnListIsSet;
}
void SubscriptionData::unsetReqPlmnList()
{
    m_ReqPlmnListIsSet = false;
}
std::vector<PlmnIdNid> SubscriptionData::getReqSnpnList() const
{
    return m_ReqSnpnList;
}
void SubscriptionData::setReqSnpnList(std::vector<PlmnIdNid> const& value)
{
    m_ReqSnpnList = value;
    m_ReqSnpnListIsSet = true;
}
bool SubscriptionData::reqSnpnListIsSet() const
{
    return m_ReqSnpnListIsSet;
}
void SubscriptionData::unsetReqSnpnList()
{
    m_ReqSnpnListIsSet = false;
}
std::vector<std::string> SubscriptionData::getServingScope() const
{
    return m_ServingScope;
}
void SubscriptionData::setServingScope(std::vector<std::string> const& value)
{
    m_ServingScope = value;
    m_ServingScopeIsSet = true;
}
bool SubscriptionData::servingScopeIsSet() const
{
    return m_ServingScopeIsSet;
}
void SubscriptionData::unsetServingScope()
{
    m_ServingScopeIsSet = false;
}
std::string SubscriptionData::getRequesterFeatures() const
{
    return m_RequesterFeatures;
}
void SubscriptionData::setRequesterFeatures(std::string const& value)
{
    m_RequesterFeatures = value;
    m_RequesterFeaturesIsSet = true;
}
bool SubscriptionData::requesterFeaturesIsSet() const
{
    return m_RequesterFeaturesIsSet;
}
void SubscriptionData::unsetRequesterFeatures()
{
    m_RequesterFeaturesIsSet = false;
}
std::string SubscriptionData::getNrfSupportedFeatures() const
{
    return m_NrfSupportedFeatures;
}
void SubscriptionData::setNrfSupportedFeatures(std::string const& value)
{
    m_NrfSupportedFeatures = value;
    m_NrfSupportedFeaturesIsSet = true;
}
bool SubscriptionData::nrfSupportedFeaturesIsSet() const
{
    return m_NrfSupportedFeaturesIsSet;
}
void SubscriptionData::unsetNrfSupportedFeatures()
{
    m_NrfSupportedFeaturesIsSet = false;
}
std::string SubscriptionData::getHnrfUri() const
{
    return m_HnrfUri;
}
void SubscriptionData::setHnrfUri(std::string const& value)
{
    m_HnrfUri = value;
    m_HnrfUriIsSet = true;
}
bool SubscriptionData::hnrfUriIsSet() const
{
    return m_HnrfUriIsSet;
}
void SubscriptionData::unsetHnrfUri()
{
    m_HnrfUriIsSet = false;
}


} // namespace org::openapitools::server::model

