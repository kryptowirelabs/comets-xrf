/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NefInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NefInfo::NefInfo()
{
    m_NefId = "";
    m_NefIdIsSet = false;
    m_PfdDataIsSet = false;
    m_AfEeDataIsSet = false;
    m_GpsiRangesIsSet = false;
    m_ExternalGroupIdentifiersRangesIsSet = false;
    m_ServedFqdnListIsSet = false;
    m_TaiListIsSet = false;
    m_TaiRangeListIsSet = false;
    m_DnaiListIsSet = false;
    m_AfSliceDnnListIsSet = false;
    
}

void NefInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NefInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NefInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NefInfo" : pathPrefix;

                     
    if (gpsiRangesIsSet())
    {
        const std::vector<IdentityRange>& value = m_GpsiRanges;
        const std::string currentValuePath = _pathPrefix + ".gpsiRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IdentityRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".gpsiRanges") && success;
 
                i++;
            }
        }

    }
         
    if (externalGroupIdentifiersRangesIsSet())
    {
        const std::vector<IdentityRange>& value = m_ExternalGroupIdentifiersRanges;
        const std::string currentValuePath = _pathPrefix + ".externalGroupIdentifiersRanges";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const IdentityRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".externalGroupIdentifiersRanges") && success;
 
                i++;
            }
        }

    }
         
    if (servedFqdnListIsSet())
    {
        const std::vector<std::string>& value = m_ServedFqdnList;
        const std::string currentValuePath = _pathPrefix + ".servedFqdnList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (taiListIsSet())
    {
        const std::vector<Tai>& value = m_TaiList;
        const std::string currentValuePath = _pathPrefix + ".taiList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Tai& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".taiList") && success;
 
                i++;
            }
        }

    }
         
    if (taiRangeListIsSet())
    {
        const std::vector<TaiRange>& value = m_TaiRangeList;
        const std::string currentValuePath = _pathPrefix + ".taiRangeList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const TaiRange& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".taiRangeList") && success;
 
                i++;
            }
        }

    }
         
    if (dnaiListIsSet())
    {
        const std::vector<std::string>& value = m_DnaiList;
        const std::string currentValuePath = _pathPrefix + ".dnaiList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (afSliceDnnListIsSet())
    {
        const std::vector<AfSliceDnn>& value = m_AfSliceDnnList;
        const std::string currentValuePath = _pathPrefix + ".afSliceDnnList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const AfSliceDnn& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".afSliceDnnList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool NefInfo::operator==(const NefInfo& rhs) const
{
    return
    
    
    
    ((!nefIdIsSet() && !rhs.nefIdIsSet()) || (nefIdIsSet() && rhs.nefIdIsSet() && getNefId() == rhs.getNefId())) &&
    
    
    ((!pfdDataIsSet() && !rhs.pfdDataIsSet()) || (pfdDataIsSet() && rhs.pfdDataIsSet() && getPfdData() == rhs.getPfdData())) &&
    
    
    ((!afEeDataIsSet() && !rhs.afEeDataIsSet()) || (afEeDataIsSet() && rhs.afEeDataIsSet() && getAfEeData() == rhs.getAfEeData())) &&
    
    
    ((!gpsiRangesIsSet() && !rhs.gpsiRangesIsSet()) || (gpsiRangesIsSet() && rhs.gpsiRangesIsSet() && getGpsiRanges() == rhs.getGpsiRanges())) &&
    
    
    ((!externalGroupIdentifiersRangesIsSet() && !rhs.externalGroupIdentifiersRangesIsSet()) || (externalGroupIdentifiersRangesIsSet() && rhs.externalGroupIdentifiersRangesIsSet() && getExternalGroupIdentifiersRanges() == rhs.getExternalGroupIdentifiersRanges())) &&
    
    
    ((!servedFqdnListIsSet() && !rhs.servedFqdnListIsSet()) || (servedFqdnListIsSet() && rhs.servedFqdnListIsSet() && getServedFqdnList() == rhs.getServedFqdnList())) &&
    
    
    ((!taiListIsSet() && !rhs.taiListIsSet()) || (taiListIsSet() && rhs.taiListIsSet() && getTaiList() == rhs.getTaiList())) &&
    
    
    ((!taiRangeListIsSet() && !rhs.taiRangeListIsSet()) || (taiRangeListIsSet() && rhs.taiRangeListIsSet() && getTaiRangeList() == rhs.getTaiRangeList())) &&
    
    
    ((!dnaiListIsSet() && !rhs.dnaiListIsSet()) || (dnaiListIsSet() && rhs.dnaiListIsSet() && getDnaiList() == rhs.getDnaiList())) &&
    
    
    ((!afSliceDnnListIsSet() && !rhs.afSliceDnnListIsSet()) || (afSliceDnnListIsSet() && rhs.afSliceDnnListIsSet() && getAfSliceDnnList() == rhs.getAfSliceDnnList()))
    
    ;
}

bool NefInfo::operator!=(const NefInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NefInfo& o)
{
    j = nlohmann::json();
    if(o.nefIdIsSet())
        j["nefId"] = o.m_NefId;
    if(o.pfdDataIsSet())
        j["pfdData"] = o.m_PfdData;
    if(o.afEeDataIsSet())
        j["afEeData"] = o.m_AfEeData;
    if(o.gpsiRangesIsSet() || !o.m_GpsiRanges.empty())
        j["gpsiRanges"] = o.m_GpsiRanges;
    if(o.externalGroupIdentifiersRangesIsSet() || !o.m_ExternalGroupIdentifiersRanges.empty())
        j["externalGroupIdentifiersRanges"] = o.m_ExternalGroupIdentifiersRanges;
    if(o.servedFqdnListIsSet() || !o.m_ServedFqdnList.empty())
        j["servedFqdnList"] = o.m_ServedFqdnList;
    if(o.taiListIsSet() || !o.m_TaiList.empty())
        j["taiList"] = o.m_TaiList;
    if(o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
        j["taiRangeList"] = o.m_TaiRangeList;
    if(o.dnaiListIsSet() || !o.m_DnaiList.empty())
        j["dnaiList"] = o.m_DnaiList;
    if(o.afSliceDnnListIsSet() || !o.m_AfSliceDnnList.empty())
        j["afSliceDnnList"] = o.m_AfSliceDnnList;
    
}

void from_json(const nlohmann::json& j, NefInfo& o)
{
    if(j.find("nefId") != j.end())
    {
        j.at("nefId").get_to(o.m_NefId);
        o.m_NefIdIsSet = true;
    } 
    if(j.find("pfdData") != j.end())
    {
        j.at("pfdData").get_to(o.m_PfdData);
        o.m_PfdDataIsSet = true;
    } 
    if(j.find("afEeData") != j.end())
    {
        j.at("afEeData").get_to(o.m_AfEeData);
        o.m_AfEeDataIsSet = true;
    } 
    if(j.find("gpsiRanges") != j.end())
    {
        j.at("gpsiRanges").get_to(o.m_GpsiRanges);
        o.m_GpsiRangesIsSet = true;
    } 
    if(j.find("externalGroupIdentifiersRanges") != j.end())
    {
        j.at("externalGroupIdentifiersRanges").get_to(o.m_ExternalGroupIdentifiersRanges);
        o.m_ExternalGroupIdentifiersRangesIsSet = true;
    } 
    if(j.find("servedFqdnList") != j.end())
    {
        j.at("servedFqdnList").get_to(o.m_ServedFqdnList);
        o.m_ServedFqdnListIsSet = true;
    } 
    if(j.find("taiList") != j.end())
    {
        j.at("taiList").get_to(o.m_TaiList);
        o.m_TaiListIsSet = true;
    } 
    if(j.find("taiRangeList") != j.end())
    {
        j.at("taiRangeList").get_to(o.m_TaiRangeList);
        o.m_TaiRangeListIsSet = true;
    } 
    if(j.find("dnaiList") != j.end())
    {
        j.at("dnaiList").get_to(o.m_DnaiList);
        o.m_DnaiListIsSet = true;
    } 
    if(j.find("afSliceDnnList") != j.end())
    {
        j.at("afSliceDnnList").get_to(o.m_AfSliceDnnList);
        o.m_AfSliceDnnListIsSet = true;
    } 
    
}

std::string NefInfo::getNefId() const
{
    return m_NefId;
}
void NefInfo::setNefId(std::string const& value)
{
    m_NefId = value;
    m_NefIdIsSet = true;
}
bool NefInfo::nefIdIsSet() const
{
    return m_NefIdIsSet;
}
void NefInfo::unsetNefId()
{
    m_NefIdIsSet = false;
}
PfdData NefInfo::getPfdData() const
{
    return m_PfdData;
}
void NefInfo::setPfdData(PfdData const& value)
{
    m_PfdData = value;
    m_PfdDataIsSet = true;
}
bool NefInfo::pfdDataIsSet() const
{
    return m_PfdDataIsSet;
}
void NefInfo::unsetPfdData()
{
    m_PfdDataIsSet = false;
}
AfEventExposureData NefInfo::getAfEeData() const
{
    return m_AfEeData;
}
void NefInfo::setAfEeData(AfEventExposureData const& value)
{
    m_AfEeData = value;
    m_AfEeDataIsSet = true;
}
bool NefInfo::afEeDataIsSet() const
{
    return m_AfEeDataIsSet;
}
void NefInfo::unsetAfEeData()
{
    m_AfEeDataIsSet = false;
}
std::vector<IdentityRange> NefInfo::getGpsiRanges() const
{
    return m_GpsiRanges;
}
void NefInfo::setGpsiRanges(std::vector<IdentityRange> const& value)
{
    m_GpsiRanges = value;
    m_GpsiRangesIsSet = true;
}
bool NefInfo::gpsiRangesIsSet() const
{
    return m_GpsiRangesIsSet;
}
void NefInfo::unsetGpsiRanges()
{
    m_GpsiRangesIsSet = false;
}
std::vector<IdentityRange> NefInfo::getExternalGroupIdentifiersRanges() const
{
    return m_ExternalGroupIdentifiersRanges;
}
void NefInfo::setExternalGroupIdentifiersRanges(std::vector<IdentityRange> const& value)
{
    m_ExternalGroupIdentifiersRanges = value;
    m_ExternalGroupIdentifiersRangesIsSet = true;
}
bool NefInfo::externalGroupIdentifiersRangesIsSet() const
{
    return m_ExternalGroupIdentifiersRangesIsSet;
}
void NefInfo::unsetExternalGroupIdentifiersRanges()
{
    m_ExternalGroupIdentifiersRangesIsSet = false;
}
std::vector<std::string> NefInfo::getServedFqdnList() const
{
    return m_ServedFqdnList;
}
void NefInfo::setServedFqdnList(std::vector<std::string> const& value)
{
    m_ServedFqdnList = value;
    m_ServedFqdnListIsSet = true;
}
bool NefInfo::servedFqdnListIsSet() const
{
    return m_ServedFqdnListIsSet;
}
void NefInfo::unsetServedFqdnList()
{
    m_ServedFqdnListIsSet = false;
}
std::vector<Tai> NefInfo::getTaiList() const
{
    return m_TaiList;
}
void NefInfo::setTaiList(std::vector<Tai> const& value)
{
    m_TaiList = value;
    m_TaiListIsSet = true;
}
bool NefInfo::taiListIsSet() const
{
    return m_TaiListIsSet;
}
void NefInfo::unsetTaiList()
{
    m_TaiListIsSet = false;
}
std::vector<TaiRange> NefInfo::getTaiRangeList() const
{
    return m_TaiRangeList;
}
void NefInfo::setTaiRangeList(std::vector<TaiRange> const& value)
{
    m_TaiRangeList = value;
    m_TaiRangeListIsSet = true;
}
bool NefInfo::taiRangeListIsSet() const
{
    return m_TaiRangeListIsSet;
}
void NefInfo::unsetTaiRangeList()
{
    m_TaiRangeListIsSet = false;
}
std::vector<std::string> NefInfo::getDnaiList() const
{
    return m_DnaiList;
}
void NefInfo::setDnaiList(std::vector<std::string> const& value)
{
    m_DnaiList = value;
    m_DnaiListIsSet = true;
}
bool NefInfo::dnaiListIsSet() const
{
    return m_DnaiListIsSet;
}
void NefInfo::unsetDnaiList()
{
    m_DnaiListIsSet = false;
}
std::vector<AfSliceDnn> NefInfo::getAfSliceDnnList() const
{
    return m_AfSliceDnnList;
}
void NefInfo::setAfSliceDnnList(std::vector<AfSliceDnn> const& value)
{
    m_AfSliceDnnList = value;
    m_AfSliceDnnListIsSet = true;
}
bool NefInfo::afSliceDnnListIsSet() const
{
    return m_AfSliceDnnListIsSet;
}
void NefInfo::unsetAfSliceDnnList()
{
    m_AfSliceDnnListIsSet = false;
}


} // namespace org::openapitools::server::model

