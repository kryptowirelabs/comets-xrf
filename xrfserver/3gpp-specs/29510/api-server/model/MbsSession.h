/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * MbsSession.h
 *
 * MBS Session currently served by an MB-SMF
 */

#ifndef MbsSession_H_
#define MbsSession_H_


#include <map>
#include "MbsSessionId.h"
#include <vector>
#include "MbsAreaSession.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// MBS Session currently served by an MB-SMF
/// </summary>
class  MbsSession
{
public:
    MbsSession();
    virtual ~MbsSession() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const MbsSession& rhs) const;
    bool operator!=(const MbsSession& rhs) const;

    /////////////////////////////////////////////
    /// MbsSession members

    /// <summary>
    /// 
    /// </summary>
    MbsSessionId getMbsSessionId() const;
    void setMbsSessionId(MbsSessionId const& value);
    /// <summary>
    /// A map (list of key-value pairs) where the key identifies an areaSessionId
    /// </summary>
    std::map<std::string, MbsAreaSession> getMbsAreaSessions() const;
    void setMbsAreaSessions(std::map<std::string, MbsAreaSession> const& value);
    bool mbsAreaSessionsIsSet() const;
    void unsetMbsAreaSessions();

    friend void to_json(nlohmann::json& j, const MbsSession& o);
    friend void from_json(const nlohmann::json& j, MbsSession& o);
protected:
    MbsSessionId m_MbsSessionId;

    std::map<std::string, MbsAreaSession> m_MbsAreaSessions;
    bool m_MbsAreaSessionsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* MbsSession_H_ */
