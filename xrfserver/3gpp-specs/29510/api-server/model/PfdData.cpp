/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PfdData.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PfdData::PfdData()
{
    m_AppIdsIsSet = false;
    m_AfIdsIsSet = false;
    
}

void PfdData::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PfdData::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PfdData::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PfdData" : pathPrefix;

         
    if (appIdsIsSet())
    {
        const std::vector<std::string>& value = m_AppIds;
        const std::string currentValuePath = _pathPrefix + ".appIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (afIdsIsSet())
    {
        const std::vector<std::string>& value = m_AfIds;
        const std::string currentValuePath = _pathPrefix + ".afIds";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool PfdData::operator==(const PfdData& rhs) const
{
    return
    
    
    
    ((!appIdsIsSet() && !rhs.appIdsIsSet()) || (appIdsIsSet() && rhs.appIdsIsSet() && getAppIds() == rhs.getAppIds())) &&
    
    
    ((!afIdsIsSet() && !rhs.afIdsIsSet()) || (afIdsIsSet() && rhs.afIdsIsSet() && getAfIds() == rhs.getAfIds()))
    
    ;
}

bool PfdData::operator!=(const PfdData& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PfdData& o)
{
    j = nlohmann::json();
    if(o.appIdsIsSet() || !o.m_AppIds.empty())
        j["appIds"] = o.m_AppIds;
    if(o.afIdsIsSet() || !o.m_AfIds.empty())
        j["afIds"] = o.m_AfIds;
    
}

void from_json(const nlohmann::json& j, PfdData& o)
{
    if(j.find("appIds") != j.end())
    {
        j.at("appIds").get_to(o.m_AppIds);
        o.m_AppIdsIsSet = true;
    } 
    if(j.find("afIds") != j.end())
    {
        j.at("afIds").get_to(o.m_AfIds);
        o.m_AfIdsIsSet = true;
    } 
    
}

std::vector<std::string> PfdData::getAppIds() const
{
    return m_AppIds;
}
void PfdData::setAppIds(std::vector<std::string> const& value)
{
    m_AppIds = value;
    m_AppIdsIsSet = true;
}
bool PfdData::appIdsIsSet() const
{
    return m_AppIdsIsSet;
}
void PfdData::unsetAppIds()
{
    m_AppIdsIsSet = false;
}
std::vector<std::string> PfdData::getAfIds() const
{
    return m_AfIds;
}
void PfdData::setAfIds(std::vector<std::string> const& value)
{
    m_AfIds = value;
    m_AfIdsIsSet = true;
}
bool PfdData::afIdsIsSet() const
{
    return m_AfIdsIsSet;
}
void PfdData::unsetAfIds()
{
    m_AfIdsIsSet = false;
}


} // namespace org::openapitools::server::model

