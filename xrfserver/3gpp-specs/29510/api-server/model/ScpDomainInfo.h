/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ScpDomainInfo.h
 *
 * SCP Domain specific information
 */

#ifndef ScpDomainInfo_H_
#define ScpDomainInfo_H_


#include <string>
#include "IpEndPoint.h"
#include <map>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// SCP Domain specific information
/// </summary>
class  ScpDomainInfo
{
public:
    ScpDomainInfo();
    virtual ~ScpDomainInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ScpDomainInfo& rhs) const;
    bool operator!=(const ScpDomainInfo& rhs) const;

    /////////////////////////////////////////////
    /// ScpDomainInfo members

    /// <summary>
    /// Fully Qualified Domain Name
    /// </summary>
    std::string getScpFqdn() const;
    void setScpFqdn(std::string const& value);
    bool scpFqdnIsSet() const;
    void unsetScpFqdn();
    /// <summary>
    /// 
    /// </summary>
    std::vector<IpEndPoint> getScpIpEndPoints() const;
    void setScpIpEndPoints(std::vector<IpEndPoint> const& value);
    bool scpIpEndPointsIsSet() const;
    void unsetScpIpEndPoints();
    /// <summary>
    /// 
    /// </summary>
    std::string getScpPrefix() const;
    void setScpPrefix(std::string const& value);
    bool scpPrefixIsSet() const;
    void unsetScpPrefix();
    /// <summary>
    /// Port numbers for HTTP and HTTPS. The key of the map shall be \&quot;http\&quot; or \&quot;https\&quot;
    /// </summary>
    std::map<std::string, int32_t> getScpPorts() const;
    void setScpPorts(std::map<std::string, int32_t> const value);
    bool scpPortsIsSet() const;
    void unsetScpPorts();

    friend void to_json(nlohmann::json& j, const ScpDomainInfo& o);
    friend void from_json(const nlohmann::json& j, ScpDomainInfo& o);
protected:
    std::string m_ScpFqdn;
    bool m_ScpFqdnIsSet;
    std::vector<IpEndPoint> m_ScpIpEndPoints;
    bool m_ScpIpEndPointsIsSet;
    std::string m_ScpPrefix;
    bool m_ScpPrefixIsSet;
    std::map<std::string, int32_t> m_ScpPorts;
    bool m_ScpPortsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ScpDomainInfo_H_ */
