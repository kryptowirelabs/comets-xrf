/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NfGroupListCond.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NfGroupListCond::NfGroupListCond()
{
    m_ConditionType = "";
    m_NfType = "";
    
}

void NfGroupListCond::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NfGroupListCond::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NfGroupListCond::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NfGroupListCond" : pathPrefix;

                 
    
    /* NfGroupIdList */ {
        const std::vector<std::string>& value = m_NfGroupIdList;
        const std::string currentValuePath = _pathPrefix + ".nfGroupIdList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool NfGroupListCond::operator==(const NfGroupListCond& rhs) const
{
    return
    
    
    (getConditionType() == rhs.getConditionType())
     &&
    
    (getNfType() == rhs.getNfType())
     &&
    
    (getNfGroupIdList() == rhs.getNfGroupIdList())
    
    
    ;
}

bool NfGroupListCond::operator!=(const NfGroupListCond& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NfGroupListCond& o)
{
    j = nlohmann::json();
    j["conditionType"] = o.m_ConditionType;
    j["nfType"] = o.m_NfType;
    j["nfGroupIdList"] = o.m_NfGroupIdList;
    
}

void from_json(const nlohmann::json& j, NfGroupListCond& o)
{
    j.at("conditionType").get_to(o.m_ConditionType);
    j.at("nfType").get_to(o.m_NfType);
    j.at("nfGroupIdList").get_to(o.m_NfGroupIdList);
    
}

std::string NfGroupListCond::getConditionType() const
{
    return m_ConditionType;
}
void NfGroupListCond::setConditionType(std::string const& value)
{
    m_ConditionType = value;
}
std::string NfGroupListCond::getNfType() const
{
    return m_NfType;
}
void NfGroupListCond::setNfType(std::string const& value)
{
    m_NfType = value;
}
std::vector<std::string> NfGroupListCond::getNfGroupIdList() const
{
    return m_NfGroupIdList;
}
void NfGroupListCond::setNfGroupIdList(std::vector<std::string> const& value)
{
    m_NfGroupIdList = value;
}


} // namespace org::openapitools::server::model

