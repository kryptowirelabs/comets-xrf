/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ConditionEventType.h
 *
 * Indicates whether a notification is due to the NF Instance to start or stop being part of a condition for a subscription to a set of NFs
 */

#ifndef ConditionEventType_H_
#define ConditionEventType_H_


#include "ConditionEventType_anyOf.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Indicates whether a notification is due to the NF Instance to start or stop being part of a condition for a subscription to a set of NFs
/// </summary>
class  ConditionEventType
{
public:
    ConditionEventType();
    virtual ~ConditionEventType() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ConditionEventType& rhs) const;
    bool operator!=(const ConditionEventType& rhs) const;

    /////////////////////////////////////////////
    /// ConditionEventType members


    ConditionEventType_anyOf getValue() const;
    void setValue(ConditionEventType_anyOf value);
    ConditionEventType_anyOf::eConditionEventType_anyOf getEnumValue() const;
    void setEnumValue(ConditionEventType_anyOf::eConditionEventType_anyOf value);
    friend void to_json(nlohmann::json& j, const ConditionEventType& o);
    friend void from_json(const nlohmann::json& j, ConditionEventType& o);
    friend void to_json(nlohmann::json& j, const ConditionEventType_anyOf& o);
    friend void from_json(const nlohmann::json& j, ConditionEventType_anyOf& o);
protected:
    ConditionEventType_anyOf m_value;
};

} // namespace org::openapitools::server::model

#endif /* ConditionEventType_H_ */
