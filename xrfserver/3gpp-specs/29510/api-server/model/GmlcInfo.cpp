/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GmlcInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GmlcInfo::GmlcInfo()
{
    m_ServingClientTypesIsSet = false;
    m_GmlcNumbersIsSet = false;
    
}

void GmlcInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GmlcInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GmlcInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GmlcInfo" : pathPrefix;

         
    if (servingClientTypesIsSet())
    {
        const std::vector<ExternalClientType>& value = m_ServingClientTypes;
        const std::string currentValuePath = _pathPrefix + ".servingClientTypes";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const ExternalClientType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".servingClientTypes") && success;
 
                i++;
            }
        }

    }
         
    if (gmlcNumbersIsSet())
    {
        const std::vector<std::string>& value = m_GmlcNumbers;
        const std::string currentValuePath = _pathPrefix + ".gmlcNumbers";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool GmlcInfo::operator==(const GmlcInfo& rhs) const
{
    return
    
    
    
    ((!servingClientTypesIsSet() && !rhs.servingClientTypesIsSet()) || (servingClientTypesIsSet() && rhs.servingClientTypesIsSet() && getServingClientTypes() == rhs.getServingClientTypes())) &&
    
    
    ((!gmlcNumbersIsSet() && !rhs.gmlcNumbersIsSet()) || (gmlcNumbersIsSet() && rhs.gmlcNumbersIsSet() && getGmlcNumbers() == rhs.getGmlcNumbers()))
    
    ;
}

bool GmlcInfo::operator!=(const GmlcInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GmlcInfo& o)
{
    j = nlohmann::json();
    if(o.servingClientTypesIsSet() || !o.m_ServingClientTypes.empty())
        j["servingClientTypes"] = o.m_ServingClientTypes;
    if(o.gmlcNumbersIsSet() || !o.m_GmlcNumbers.empty())
        j["gmlcNumbers"] = o.m_GmlcNumbers;
    
}

void from_json(const nlohmann::json& j, GmlcInfo& o)
{
    if(j.find("servingClientTypes") != j.end())
    {
        j.at("servingClientTypes").get_to(o.m_ServingClientTypes);
        o.m_ServingClientTypesIsSet = true;
    } 
    if(j.find("gmlcNumbers") != j.end())
    {
        j.at("gmlcNumbers").get_to(o.m_GmlcNumbers);
        o.m_GmlcNumbersIsSet = true;
    } 
    
}

std::vector<ExternalClientType> GmlcInfo::getServingClientTypes() const
{
    return m_ServingClientTypes;
}
void GmlcInfo::setServingClientTypes(std::vector<ExternalClientType> const& value)
{
    m_ServingClientTypes = value;
    m_ServingClientTypesIsSet = true;
}
bool GmlcInfo::servingClientTypesIsSet() const
{
    return m_ServingClientTypesIsSet;
}
void GmlcInfo::unsetServingClientTypes()
{
    m_ServingClientTypesIsSet = false;
}
std::vector<std::string> GmlcInfo::getGmlcNumbers() const
{
    return m_GmlcNumbers;
}
void GmlcInfo::setGmlcNumbers(std::vector<std::string> const& value)
{
    m_GmlcNumbers = value;
    m_GmlcNumbersIsSet = true;
}
bool GmlcInfo::gmlcNumbersIsSet() const
{
    return m_GmlcNumbersIsSet;
}
void GmlcInfo::unsetGmlcNumbers()
{
    m_GmlcNumbersIsSet = false;
}


} // namespace org::openapitools::server::model

