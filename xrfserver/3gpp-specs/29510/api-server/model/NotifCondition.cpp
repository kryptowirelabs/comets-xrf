/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NotifCondition.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NotifCondition::NotifCondition()
{
    m_MonitoredAttributesIsSet = false;
    m_UnmonitoredAttributesIsSet = false;
    
}

void NotifCondition::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NotifCondition::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NotifCondition::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NotifCondition" : pathPrefix;

         
    if (monitoredAttributesIsSet())
    {
        const std::vector<std::string>& value = m_MonitoredAttributes;
        const std::string currentValuePath = _pathPrefix + ".monitoredAttributes";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (unmonitoredAttributesIsSet())
    {
        const std::vector<std::string>& value = m_UnmonitoredAttributes;
        const std::string currentValuePath = _pathPrefix + ".unmonitoredAttributes";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool NotifCondition::operator==(const NotifCondition& rhs) const
{
    return
    
    
    
    ((!monitoredAttributesIsSet() && !rhs.monitoredAttributesIsSet()) || (monitoredAttributesIsSet() && rhs.monitoredAttributesIsSet() && getMonitoredAttributes() == rhs.getMonitoredAttributes())) &&
    
    
    ((!unmonitoredAttributesIsSet() && !rhs.unmonitoredAttributesIsSet()) || (unmonitoredAttributesIsSet() && rhs.unmonitoredAttributesIsSet() && getUnmonitoredAttributes() == rhs.getUnmonitoredAttributes()))
    
    ;
}

bool NotifCondition::operator!=(const NotifCondition& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NotifCondition& o)
{
    j = nlohmann::json();
    if(o.monitoredAttributesIsSet() || !o.m_MonitoredAttributes.empty())
        j["monitoredAttributes"] = o.m_MonitoredAttributes;
    if(o.unmonitoredAttributesIsSet() || !o.m_UnmonitoredAttributes.empty())
        j["unmonitoredAttributes"] = o.m_UnmonitoredAttributes;
    
}

void from_json(const nlohmann::json& j, NotifCondition& o)
{
    if(j.find("monitoredAttributes") != j.end())
    {
        j.at("monitoredAttributes").get_to(o.m_MonitoredAttributes);
        o.m_MonitoredAttributesIsSet = true;
    } 
    if(j.find("unmonitoredAttributes") != j.end())
    {
        j.at("unmonitoredAttributes").get_to(o.m_UnmonitoredAttributes);
        o.m_UnmonitoredAttributesIsSet = true;
    } 
    
}

std::vector<std::string> NotifCondition::getMonitoredAttributes() const
{
    return m_MonitoredAttributes;
}
void NotifCondition::setMonitoredAttributes(std::vector<std::string> const& value)
{
    m_MonitoredAttributes = value;
    m_MonitoredAttributesIsSet = true;
}
bool NotifCondition::monitoredAttributesIsSet() const
{
    return m_MonitoredAttributesIsSet;
}
void NotifCondition::unsetMonitoredAttributes()
{
    m_MonitoredAttributesIsSet = false;
}
std::vector<std::string> NotifCondition::getUnmonitoredAttributes() const
{
    return m_UnmonitoredAttributes;
}
void NotifCondition::setUnmonitoredAttributes(std::vector<std::string> const& value)
{
    m_UnmonitoredAttributes = value;
    m_UnmonitoredAttributesIsSet = true;
}
bool NotifCondition::unmonitoredAttributesIsSet() const
{
    return m_UnmonitoredAttributesIsSet;
}
void NotifCondition::unsetUnmonitoredAttributes()
{
    m_UnmonitoredAttributesIsSet = false;
}


} // namespace org::openapitools::server::model

