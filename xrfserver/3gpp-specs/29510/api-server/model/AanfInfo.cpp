/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AanfInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AanfInfo::AanfInfo()
{
    m_RoutingIndicatorsIsSet = false;
    
}

void AanfInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AanfInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AanfInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AanfInfo" : pathPrefix;

         
    if (routingIndicatorsIsSet())
    {
        const std::vector<std::string>& value = m_RoutingIndicators;
        const std::string currentValuePath = _pathPrefix + ".routingIndicators";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool AanfInfo::operator==(const AanfInfo& rhs) const
{
    return
    
    
    
    ((!routingIndicatorsIsSet() && !rhs.routingIndicatorsIsSet()) || (routingIndicatorsIsSet() && rhs.routingIndicatorsIsSet() && getRoutingIndicators() == rhs.getRoutingIndicators()))
    
    ;
}

bool AanfInfo::operator!=(const AanfInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AanfInfo& o)
{
    j = nlohmann::json();
    if(o.routingIndicatorsIsSet() || !o.m_RoutingIndicators.empty())
        j["routingIndicators"] = o.m_RoutingIndicators;
    
}

void from_json(const nlohmann::json& j, AanfInfo& o)
{
    if(j.find("routingIndicators") != j.end())
    {
        j.at("routingIndicators").get_to(o.m_RoutingIndicators);
        o.m_RoutingIndicatorsIsSet = true;
    } 
    
}

std::vector<std::string> AanfInfo::getRoutingIndicators() const
{
    return m_RoutingIndicators;
}
void AanfInfo::setRoutingIndicators(std::vector<std::string> const& value)
{
    m_RoutingIndicators = value;
    m_RoutingIndicatorsIsSet = true;
}
bool AanfInfo::routingIndicatorsIsSet() const
{
    return m_RoutingIndicatorsIsSet;
}
void AanfInfo::unsetRoutingIndicators()
{
    m_RoutingIndicatorsIsSet = false;
}


} // namespace org::openapitools::server::model

