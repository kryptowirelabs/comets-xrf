/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * MbSmfInfo.h
 *
 * Information of an MB-SMF NF Instance
 */

#ifndef MbSmfInfo_H_
#define MbSmfInfo_H_


#include "MbsSession.h"
#include "Tai.h"
#include "TaiRange.h"
#include "TmgiRange.h"
#include <map>
#include <vector>
#include "SnssaiMbSmfInfoItem.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Information of an MB-SMF NF Instance
/// </summary>
class  MbSmfInfo
{
public:
    MbSmfInfo();
    virtual ~MbSmfInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const MbSmfInfo& rhs) const;
    bool operator!=(const MbSmfInfo& rhs) const;

    /////////////////////////////////////////////
    /// MbSmfInfo members

    /// <summary>
    /// A map (list of key-value pairs) where a valid JSON string serves as key
    /// </summary>
    std::map<std::string, SnssaiMbSmfInfoItem> getSNssaiInfoList() const;
    void setSNssaiInfoList(std::map<std::string, SnssaiMbSmfInfoItem> const& value);
    bool sNssaiInfoListIsSet() const;
    void unsetSNssaiInfoList();
    /// <summary>
    /// A map (list of key-value pairs) where a valid JSON string serves as key
    /// </summary>
    std::map<std::string, TmgiRange> getTmgiRangeList() const;
    void setTmgiRangeList(std::map<std::string, TmgiRange> const& value);
    bool tmgiRangeListIsSet() const;
    void unsetTmgiRangeList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<Tai> getTaiList() const;
    void setTaiList(std::vector<Tai> const& value);
    bool taiListIsSet() const;
    void unsetTaiList();
    /// <summary>
    /// 
    /// </summary>
    std::vector<TaiRange> getTaiRangeList() const;
    void setTaiRangeList(std::vector<TaiRange> const& value);
    bool taiRangeListIsSet() const;
    void unsetTaiRangeList();
    /// <summary>
    /// A map (list of key-value pairs) where a valid JSON string serves as key
    /// </summary>
    std::map<std::string, MbsSession> getMbsSessionList() const;
    void setMbsSessionList(std::map<std::string, MbsSession> const& value);
    bool mbsSessionListIsSet() const;
    void unsetMbsSessionList();

    friend void to_json(nlohmann::json& j, const MbSmfInfo& o);
    friend void from_json(const nlohmann::json& j, MbSmfInfo& o);
protected:
    std::map<std::string, SnssaiMbSmfInfoItem> m_SNssaiInfoList;
    bool m_SNssaiInfoListIsSet;
    std::map<std::string, TmgiRange> m_TmgiRangeList;
    bool m_TmgiRangeListIsSet;
    std::vector<Tai> m_TaiList;
    bool m_TaiListIsSet;
    std::vector<TaiRange> m_TaiRangeList;
    bool m_TaiRangeListIsSet;
    std::map<std::string, MbsSession> m_MbsSessionList;
    bool m_MbsSessionListIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* MbSmfInfo_H_ */
