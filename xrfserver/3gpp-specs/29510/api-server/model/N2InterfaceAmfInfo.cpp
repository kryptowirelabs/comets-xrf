/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "N2InterfaceAmfInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

N2InterfaceAmfInfo::N2InterfaceAmfInfo()
{
    m_Ipv4EndpointAddressIsSet = false;
    m_Ipv6EndpointAddressIsSet = false;
    m_AmfName = "";
    m_AmfNameIsSet = false;
    
}

void N2InterfaceAmfInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool N2InterfaceAmfInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool N2InterfaceAmfInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "N2InterfaceAmfInfo" : pathPrefix;

         
    if (ipv4EndpointAddressIsSet())
    {
        const std::vector<std::string>& value = m_Ipv4EndpointAddress;
        const std::string currentValuePath = _pathPrefix + ".ipv4EndpointAddress";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (ipv6EndpointAddressIsSet())
    {
        const std::vector<Ipv6Addr>& value = m_Ipv6EndpointAddress;
        const std::string currentValuePath = _pathPrefix + ".ipv6EndpointAddress";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const Ipv6Addr& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".ipv6EndpointAddress") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool N2InterfaceAmfInfo::operator==(const N2InterfaceAmfInfo& rhs) const
{
    return
    
    
    
    ((!ipv4EndpointAddressIsSet() && !rhs.ipv4EndpointAddressIsSet()) || (ipv4EndpointAddressIsSet() && rhs.ipv4EndpointAddressIsSet() && getIpv4EndpointAddress() == rhs.getIpv4EndpointAddress())) &&
    
    
    ((!ipv6EndpointAddressIsSet() && !rhs.ipv6EndpointAddressIsSet()) || (ipv6EndpointAddressIsSet() && rhs.ipv6EndpointAddressIsSet() && getIpv6EndpointAddress() == rhs.getIpv6EndpointAddress())) &&
    
    
    ((!amfNameIsSet() && !rhs.amfNameIsSet()) || (amfNameIsSet() && rhs.amfNameIsSet() && getAmfName() == rhs.getAmfName()))
    
    ;
}

bool N2InterfaceAmfInfo::operator!=(const N2InterfaceAmfInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const N2InterfaceAmfInfo& o)
{
    j = nlohmann::json();
    if(o.ipv4EndpointAddressIsSet() || !o.m_Ipv4EndpointAddress.empty())
        j["ipv4EndpointAddress"] = o.m_Ipv4EndpointAddress;
    if(o.ipv6EndpointAddressIsSet() || !o.m_Ipv6EndpointAddress.empty())
        j["ipv6EndpointAddress"] = o.m_Ipv6EndpointAddress;
    if(o.amfNameIsSet())
        j["amfName"] = o.m_AmfName;
    
}

void from_json(const nlohmann::json& j, N2InterfaceAmfInfo& o)
{
    if(j.find("ipv4EndpointAddress") != j.end())
    {
        j.at("ipv4EndpointAddress").get_to(o.m_Ipv4EndpointAddress);
        o.m_Ipv4EndpointAddressIsSet = true;
    } 
    if(j.find("ipv6EndpointAddress") != j.end())
    {
        j.at("ipv6EndpointAddress").get_to(o.m_Ipv6EndpointAddress);
        o.m_Ipv6EndpointAddressIsSet = true;
    } 
    if(j.find("amfName") != j.end())
    {
        j.at("amfName").get_to(o.m_AmfName);
        o.m_AmfNameIsSet = true;
    } 
    
}

std::vector<std::string> N2InterfaceAmfInfo::getIpv4EndpointAddress() const
{
    return m_Ipv4EndpointAddress;
}
void N2InterfaceAmfInfo::setIpv4EndpointAddress(std::vector<std::string> const& value)
{
    m_Ipv4EndpointAddress = value;
    m_Ipv4EndpointAddressIsSet = true;
}
bool N2InterfaceAmfInfo::ipv4EndpointAddressIsSet() const
{
    return m_Ipv4EndpointAddressIsSet;
}
void N2InterfaceAmfInfo::unsetIpv4EndpointAddress()
{
    m_Ipv4EndpointAddressIsSet = false;
}
std::vector<Ipv6Addr> N2InterfaceAmfInfo::getIpv6EndpointAddress() const
{
    return m_Ipv6EndpointAddress;
}
void N2InterfaceAmfInfo::setIpv6EndpointAddress(std::vector<Ipv6Addr> const& value)
{
    m_Ipv6EndpointAddress = value;
    m_Ipv6EndpointAddressIsSet = true;
}
bool N2InterfaceAmfInfo::ipv6EndpointAddressIsSet() const
{
    return m_Ipv6EndpointAddressIsSet;
}
void N2InterfaceAmfInfo::unsetIpv6EndpointAddress()
{
    m_Ipv6EndpointAddressIsSet = false;
}
std::string N2InterfaceAmfInfo::getAmfName() const
{
    return m_AmfName;
}
void N2InterfaceAmfInfo::setAmfName(std::string const& value)
{
    m_AmfName = value;
    m_AmfNameIsSet = true;
}
bool N2InterfaceAmfInfo::amfNameIsSet() const
{
    return m_AmfNameIsSet;
}
void N2InterfaceAmfInfo::unsetAmfName()
{
    m_AmfNameIsSet = false;
}


} // namespace org::openapitools::server::model

