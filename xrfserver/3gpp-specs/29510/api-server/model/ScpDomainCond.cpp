/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ScpDomainCond.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ScpDomainCond::ScpDomainCond()
{
    m_NfTypeListIsSet = false;
    
}

void ScpDomainCond::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ScpDomainCond::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ScpDomainCond::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ScpDomainCond" : pathPrefix;

         
    
    /* ScpDomains */ {
        const std::vector<std::string>& value = m_ScpDomains;
        const std::string currentValuePath = _pathPrefix + ".scpDomains";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (nfTypeListIsSet())
    {
        const std::vector<NFType>& value = m_NfTypeList;
        const std::string currentValuePath = _pathPrefix + ".nfTypeList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const NFType& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".nfTypeList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool ScpDomainCond::operator==(const ScpDomainCond& rhs) const
{
    return
    
    
    (getScpDomains() == rhs.getScpDomains())
     &&
    
    
    ((!nfTypeListIsSet() && !rhs.nfTypeListIsSet()) || (nfTypeListIsSet() && rhs.nfTypeListIsSet() && getNfTypeList() == rhs.getNfTypeList()))
    
    ;
}

bool ScpDomainCond::operator!=(const ScpDomainCond& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ScpDomainCond& o)
{
    j = nlohmann::json();
    j["scpDomains"] = o.m_ScpDomains;
    if(o.nfTypeListIsSet() || !o.m_NfTypeList.empty())
        j["nfTypeList"] = o.m_NfTypeList;
    
}

void from_json(const nlohmann::json& j, ScpDomainCond& o)
{
    j.at("scpDomains").get_to(o.m_ScpDomains);
    if(j.find("nfTypeList") != j.end())
    {
        j.at("nfTypeList").get_to(o.m_NfTypeList);
        o.m_NfTypeListIsSet = true;
    } 
    
}

std::vector<std::string> ScpDomainCond::getScpDomains() const
{
    return m_ScpDomains;
}
void ScpDomainCond::setScpDomains(std::vector<std::string> const& value)
{
    m_ScpDomains = value;
}
std::vector<NFType> ScpDomainCond::getNfTypeList() const
{
    return m_NfTypeList;
}
void ScpDomainCond::setNfTypeList(std::vector<NFType> const& value)
{
    m_NfTypeList = value;
    m_NfTypeListIsSet = true;
}
bool ScpDomainCond::nfTypeListIsSet() const
{
    return m_NfTypeListIsSet;
}
void ScpDomainCond::unsetNfTypeList()
{
    m_NfTypeListIsSet = false;
}


} // namespace org::openapitools::server::model

