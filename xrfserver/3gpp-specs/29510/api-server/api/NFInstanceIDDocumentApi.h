/**
* NRF NFManagement Service
* NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NFInstanceIDDocumentApi.h
 *
 * 
 */

#ifndef NFInstanceIDDocumentApi_H_
#define NFInstanceIDDocumentApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>

#include <utility>

#include "NFProfile.h"
#include "PatchItem.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  NFInstanceIDDocumentApi {
public:
    explicit NFInstanceIDDocumentApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    virtual ~NFInstanceIDDocumentApi() = default;
    void init();

    static const std::string base;

private:
    void setupRoutes();

    void deregister_nf_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_nf_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void register_nf_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void update_nf_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void nf_instance_id_document_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    const std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Deregisters a given NF Instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nfInstanceID">Unique ID of the NF Instance to deregister</param>
    virtual void deregister_nf_instance(const std::string &nfInstanceID, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Read the profile of a given NF Instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nfInstanceID">Unique ID of the NF Instance</param>
    /// <param name="requesterFeatures">Features supported by the NF Service Consumer (optional, default to &quot;&quot;)</param>
    virtual void get_nf_instance(const std::string &nfInstanceID, const Pistache::Optional<std::string> &requesterFeatures, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Register a new NF Instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nfInstanceID">Unique ID of the NF Instance to register</param>
    /// <param name="nFProfile"></param>
    /// <param name="contentEncoding">Content-Encoding, described in IETF RFC 7231 (optional, default to &quot;&quot;)</param>
    /// <param name="acceptEncoding">Accept-Encoding, described in IETF RFC 7231 (optional, default to &quot;&quot;)</param>
    virtual void register_nf_instance(const std::string &nfInstanceID, const org::openapitools::server::model::NFProfile &nFProfile, const Pistache::Optional<Pistache::Http::Header::Raw> &contentEncoding, const Pistache::Optional<Pistache::Http::Header::Raw> &acceptEncoding, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update NF Instance profile
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nfInstanceID">Unique ID of the NF Instance to update</param>
    /// <param name="patchItem"></param>
    /// <param name="contentEncoding">Content-Encoding, described in IETF RFC 7231 (optional, default to &quot;&quot;)</param>
    /// <param name="acceptEncoding">Accept-Encoding, described in IETF RFC 7231 (optional, default to &quot;&quot;)</param>
    /// <param name="ifMatch">Validator for conditional requests, as described in IETF RFC 7232, 3.2 (optional, default to &quot;&quot;)</param>
    virtual void update_nf_instance(const std::string &nfInstanceID, const std::vector<PatchItem> &patchItem, const Pistache::Optional<Pistache::Http::Header::Raw> &contentEncoding, const Pistache::Optional<Pistache::Http::Header::Raw> &acceptEncoding, const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* NFInstanceIDDocumentApi_H_ */

