/**
* XRF OAuth2 Token Introspection Request API
* XRF OAuth2 Authorization server, token introspection API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "RequestJWKSAccessApi.h"
#include "Helpers.h"

namespace xrf::api
{

using namespace xrf::helpers;
using namespace xrf::model;

const std::string RequestJWKSAccessApi::base = "";

RequestJWKSAccessApi::RequestJWKSAccessApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr)
{
}

void RequestJWKSAccessApi::init() {
    setupRoutes();
}

void RequestJWKSAccessApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/oauth/jwks", Routes::bind(&RequestJWKSAccessApi::j_wks_req_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&RequestJWKSAccessApi::request_jwks_access_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string> RequestJWKSAccessApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (xrf::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

std::pair<Pistache::Http::Code, std::string> RequestJWKSAccessApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void RequestJWKSAccessApi::j_wks_req_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto keyidQuery = request.query().get("keyid");
    Pistache::Optional<std::string> keyid;
    if(!keyidQuery.isEmpty()){
	std::string valueQuery_instance;
        if(fromStringValue(keyidQuery.get(), valueQuery_instance)){
            keyid = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->j_wks_req(keyid, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void RequestJWKSAccessApi::request_jwks_access_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace xrf::api

