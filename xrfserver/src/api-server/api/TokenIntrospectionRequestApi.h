/**
* XRF OAuth2 Token Introspection Request API
* XRF OAuth2 Authorization server, token introspection API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TokenIntrospectionRequestApi.h
 *
 * 
 */

#ifndef TokenIntrospectionRequestApi_H_
#define TokenIntrospectionRequestApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>

#include <utility>

#include "TokenIntroErr.h"
#include "TokenIntroReq.h"
#include "TokenIntroRsp.h"
#include <string>

namespace xrf::api
{

class  TokenIntrospectionRequestApi {
public:
    explicit TokenIntrospectionRequestApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    virtual ~TokenIntrospectionRequestApi() = default;
    void init();

    static const std::string base;

private:
    void setupRoutes();

    void token_intro_request_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void token_introspection_request_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    const std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Token Introspection Request
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="tokenIntroReq"></param>
    /// <param name="contentEncoding">Content-Encoding, described in IETF RFC 7231 (optional, default to &quot;&quot;)</param>
    /// <param name="acceptEncoding">Accept-Encoding, described in IETF RFC 7231 (optional, default to &quot;&quot;)</param>
    virtual void token_intro_request(const Pistache::Rest::Request& request, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace xrf::api

#endif /* TokenIntrospectionRequestApi_H_ */

