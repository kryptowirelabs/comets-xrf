/**
* XRF OAuth2 xApp Discvoery API
* XRF OAuth2 Authorization server, xApp Discovery API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "XAppDiscoverInstancesApiImpl.h"

namespace xrf {
namespace api {

using namespace xrf::model;

XAppDiscoverInstancesApiImpl::XAppDiscoverInstancesApiImpl(std::shared_ptr<Pistache::Rest::Router>& rtr, xrf_main* xrf_main_inst, std::string addr)
    : XAppDiscoverInstancesApi(rtr)
{
}

void XAppDiscoverInstancesApiImpl::x_app_disc_inst(const Pistache::Optional<std::string>& targetxApp, 
						   const Pistache::Optional<std::string>& targetLoc, 
						   Pistache::Http::ResponseWriter &response) {
	spdlog::info("===============Incoming xApp Discovery Request=================");  

	std::string targetxApp_v = {};
	if (!targetxApp.isEmpty()) {
		targetxApp_v = targetxApp.get();
		spdlog::debug("Target xApp is: {}", targetxApp_v.c_str());
	}

	std::string targetLoc_v = {};
	if (!targetLoc.isEmpty()) {
		targetLoc_v = targetLoc.get();
		spdlog::debug("Target xApp Location is: {}", targetLoc_v.c_str());
	}

	int http_code = 0;
	ProblemDetails problem_details = {};
	std::vector<std::string> search_result = {};

	xrf_main_inst->handle_search_xapp_instances(targetxApp_v, targetLoc_v, search_result, http_code, 1, problem_details);

	nlohmann::json json_data = {};
	std::string content_type = "application/json";

	if (http_code != 200) {
		// handle this inside the xrf_main function
		//to_json(json_data, problem_details);
		//content_type = "application/problem+json";
	} else {
		if (!search_result.empty()) 
			xrf_main_inst->vector_to_json(search_result, json_data);
	}

	spdlog::debug("Search result for target xApp is: {}", json_data.dump().c_str());
	
	response.headers().add<Pistache::Http::Header::ContentType>(
			Pistache::Http::Mime::MediaType(content_type));

	
	response.send(Pistache::Http::Code(http_code), json_data.dump().c_str());
}

}
}

