/**
* XRF OAuth2 Initial Authentication Request API
* XRF OAuth2 Authorization server, initial authentication with the xApp API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "InitAuthRsp.h"
#include "Helpers.h"

#include <sstream>

namespace xrf::model
{

InitAuthRsp::InitAuthRsp()
{
    m_Challenge = "";
    m_ChallengeIsSet = false;
    m_XrfInstanceId = "";
    m_XrfInstanceIdIsSet = false;
    
}

void InitAuthRsp::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw xrf::helpers::ValidationException(msg.str());
    }
}

bool InitAuthRsp::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool InitAuthRsp::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "InitAuthRsp" : pathPrefix;

            
    return success;
}

bool InitAuthRsp::operator==(const InitAuthRsp& rhs) const
{
    return
    
    
    
    ((!challengeIsSet() && !rhs.challengeIsSet()) || (challengeIsSet() && rhs.challengeIsSet() && getChallenge() == rhs.getChallenge())) &&
    
    
    ((!xrfInstanceIdIsSet() && !rhs.xrfInstanceIdIsSet()) || (xrfInstanceIdIsSet() && rhs.xrfInstanceIdIsSet() && getXrfInstanceId() == rhs.getXrfInstanceId()))
    
    ;
}

bool InitAuthRsp::operator!=(const InitAuthRsp& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const InitAuthRsp& o)
{
    j = nlohmann::json();
    if(o.challengeIsSet())
        j["challenge"] = o.m_Challenge;
    if(o.xrfInstanceIdIsSet())
        j["xrfInstanceId"] = o.m_XrfInstanceId;
    
}

void from_json(const nlohmann::json& j, InitAuthRsp& o)
{
    if(j.find("challenge") != j.end())
    {
        j.at("challenge").get_to(o.m_Challenge);
        o.m_ChallengeIsSet = true;
    } 
    if(j.find("xrfInstanceId") != j.end())
    {
        j.at("xrfInstanceId").get_to(o.m_XrfInstanceId);
        o.m_XrfInstanceIdIsSet = true;
    } 
    
}

std::string InitAuthRsp::getChallenge() const
{
    return m_Challenge;
}
void InitAuthRsp::setChallenge(std::string const& value)
{
    m_Challenge = value;
    m_ChallengeIsSet = true;
}
bool InitAuthRsp::challengeIsSet() const
{
    return m_ChallengeIsSet;
}
void InitAuthRsp::unsetChallenge()
{
    m_ChallengeIsSet = false;
}
std::string InitAuthRsp::getXrfInstanceId() const
{
    return m_XrfInstanceId;
}
void InitAuthRsp::setXrfInstanceId(std::string const& value)
{
    m_XrfInstanceId = value;
    m_XrfInstanceIdIsSet = true;
}
bool InitAuthRsp::xrfInstanceIdIsSet() const
{
    return m_XrfInstanceIdIsSet;
}
void InitAuthRsp::unsetXrfInstanceId()
{
    m_XrfInstanceIdIsSet = false;
}


} // namespace xrf::model

