/**
* XRF OAuth2 Token Introspection Request API
* XRF OAuth2 Authorization server, token introspection API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TokenIntroReq.h
 *
 * Contains information related to the token introspection request
 */

#ifndef TokenIntroReq_H_
#define TokenIntroReq_H_


#include <string>
#include <nlohmann/json.hpp>

namespace xrf::model
{

/// <summary>
/// Contains information related to the token introspection request
/// </summary>
class  TokenIntroReq
{
public:
    TokenIntroReq();
    virtual ~TokenIntroReq() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TokenIntroReq& rhs) const;
    bool operator!=(const TokenIntroReq& rhs) const;

    /////////////////////////////////////////////
    /// TokenIntroReq members

    /// <summary>
    /// JWT created before and handed in for validation
    /// </summary>
    std::string getAccessToken() const;
    void setAccessToken(std::string const& value);
    /// <summary>
    /// Universal Unique Identifier (UUID) specific to the xApp
    /// </summary>
    std::string getXappInstanceId() const;
    void setXappInstanceId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getTargetxAppId() const;
    void setTargetxAppId(std::string const& value);
    /// <summary>
    /// URI formatted string
    /// </summary>
    std::string getHxrfTokenIntroUri() const;
    void setHxrfTokenIntroUri(std::string const& value);
    bool hxrfTokenIntroUriIsSet() const;
    void unsetHxrfTokenIntroUri();

    friend void to_json(nlohmann::json& j, const TokenIntroReq& o);
    friend void from_json(const nlohmann::json& j, TokenIntroReq& o);
protected:
    std::string m_AccessToken;

    std::string m_XappInstanceId;

    std::string m_TargetxAppId;

    std::string m_HxrfTokenIntroUri;
    bool m_HxrfTokenIntroUriIsSet;
    
};

} // namespace xrf::model

#endif /* TokenIntroReq_H_ */
