/**
* XRF OAuth2 Token Introspection Request API
* XRF OAuth2 Authorization server, token introspection API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TokenIntroRsp.h
 *
 * Contains information related to the token introspection response
 */

#ifndef TokenIntroRsp_H_
#define TokenIntroRsp_H_


#include <nlohmann/json.hpp>

namespace xrf::model
{

/// <summary>
/// Contains information related to the token introspection response
/// </summary>
class  TokenIntroRsp
{
public:
    TokenIntroRsp();
    virtual ~TokenIntroRsp() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TokenIntroRsp& rhs) const;
    bool operator!=(const TokenIntroRsp& rhs) const;

    /////////////////////////////////////////////
    /// TokenIntroRsp members

    /// <summary>
    /// Information on whether or not the token is valid
    /// </summary>
    bool isTokenValidity() const;
    void setTokenValidity(bool const value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getTokenExp() const;
    void setTokenExp(int32_t const value);

    friend void to_json(nlohmann::json& j, const TokenIntroRsp& o);
    friend void from_json(const nlohmann::json& j, TokenIntroRsp& o);
protected:
    bool m_TokenValidity;

    int32_t m_TokenExp;

    
};

} // namespace xrf::model

#endif /* TokenIntroRsp_H_ */
