/**
* XRF OAuth2 xApp Discvoery API
* XRF OAuth2 Authorization server, xApp Discovery API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * XAppProfile.h
 *
 * xApp instance information in the XRF repo
 */

#ifndef XAppProfile_H_
#define XAppProfile_H_


#include <string>
#include "XAppService.h"
#include "XAppStatus.h"
#include <nlohmann/json.hpp>

namespace xrf::model
{

/// <summary>
/// xApp instance information in the XRF repo
/// </summary>
class  XAppProfile
{
public:
    XAppProfile();
    virtual ~XAppProfile() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const XAppProfile& rhs) const;
    bool operator!=(const XAppProfile& rhs) const;

    /////////////////////////////////////////////
    /// XAppProfile members

    /// <summary>
    /// unique identifier for the xApp instance
    /// </summary>
    std::string getXAppInstanceId() const;
    void setXAppInstanceId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    XAppService getXAppService() const;
    void setXAppService(XAppService const& value);
    bool xAppServiceIsSet() const;
    void unsetXAppService();
    /// <summary>
    /// 
    /// </summary>
    XAppStatus getXAppStatus() const;
    void setXAppStatus(XAppStatus const& value);
    /// <summary>
    /// ipv4 address of the xApp in dotted decimal notation as defined in RFC 1166
    /// </summary>
    std::string getXAppIpv4() const;
    void setXAppIpv4(std::string const& value);

    friend void to_json(nlohmann::json& j, const XAppProfile& o);
    friend void from_json(const nlohmann::json& j, XAppProfile& o);
protected:
    std::string m_XAppInstanceId;

    XAppService m_XAppService;
    bool m_XAppServiceIsSet;
    XAppStatus m_XAppStatus;

    std::string m_XAppIpv4;

    
};

} // namespace xrf::model

#endif /* XAppProfile_H_ */
