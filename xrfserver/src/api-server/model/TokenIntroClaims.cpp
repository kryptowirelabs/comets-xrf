/**
* XRF OAuth2 Token Introspection Request API
* XRF OAuth2 Authorization server, token introspection API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TokenIntroClaims.h"
#include "Helpers.h"

#include <sstream>

namespace xrf::model
{

TokenIntroClaims::TokenIntroClaims()
{
    m_Iss = "";
    m_Sub = "";
    m_Scope = "";
    m_Exp = 0;
    
}

void TokenIntroClaims::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw xrf::helpers::ValidationException(msg.str());
    }
}

bool TokenIntroClaims::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool TokenIntroClaims::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "TokenIntroClaims" : pathPrefix;

                 
    
    /* Scope */ {
        const std::string& value = m_Scope;
        const std::string currentValuePath = _pathPrefix + ".scope";
                
        

    }
        
    return success;
}

bool TokenIntroClaims::operator==(const TokenIntroClaims& rhs) const
{
    return
    
    
    (getIss() == rhs.getIss())
     &&
    
    (getSub() == rhs.getSub())
     &&
    
    (getScope() == rhs.getScope())
     &&
    
    (getExp() == rhs.getExp())
    
    
    ;
}

bool TokenIntroClaims::operator!=(const TokenIntroClaims& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TokenIntroClaims& o)
{
    j = nlohmann::json();
    j["iss"] = o.m_Iss;
    j["sub"] = o.m_Sub;
    j["scope"] = o.m_Scope;
    j["exp"] = o.m_Exp;
    
}

void from_json(const nlohmann::json& j, TokenIntroClaims& o)
{
    j.at("iss").get_to(o.m_Iss);
    j.at("sub").get_to(o.m_Sub);
    j.at("scope").get_to(o.m_Scope);
    j.at("exp").get_to(o.m_Exp);
    
}

std::string TokenIntroClaims::getIss() const
{
    return m_Iss;
}
void TokenIntroClaims::setIss(std::string const& value)
{
    m_Iss = value;
}
std::string TokenIntroClaims::getSub() const
{
    return m_Sub;
}
void TokenIntroClaims::setSub(std::string const& value)
{
    m_Sub = value;
}
std::string TokenIntroClaims::getScope() const
{
    return m_Scope;
}
void TokenIntroClaims::setScope(std::string const& value)
{
    m_Scope = value;
}
int32_t TokenIntroClaims::getExp() const
{
    return m_Exp;
}
void TokenIntroClaims::setExp(int32_t const value)
{
    m_Exp = value;
}


} // namespace xrf::model

