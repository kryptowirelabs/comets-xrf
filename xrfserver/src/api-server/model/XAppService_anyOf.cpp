/**
* XRF OAuth2 xApp Discvoery API
* XRF OAuth2 Authorization server, xApp Discovery API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "XAppService_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace xrf::model
{

XAppService_anyOf::XAppService_anyOf()
{
    
}

void XAppService_anyOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw xrf::helpers::ValidationException(msg.str());
    }
}

bool XAppService_anyOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool XAppService_anyOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "XAppService_anyOf" : pathPrefix;

    
    if (m_value == XAppService_anyOf::eXAppService_anyOf::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool XAppService_anyOf::operator==(const XAppService_anyOf& rhs) const
{
    return
    getValue() == rhs.getValue()
    
    ;
}

bool XAppService_anyOf::operator!=(const XAppService_anyOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const XAppService_anyOf& o)
{
    j = nlohmann::json();
    
    switch (o.getValue())
    {
        case XAppService_anyOf::eXAppService_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case XAppService_anyOf::eXAppService_anyOf::AD:
            j = "AD";
            break;
        case XAppService_anyOf::eXAppService_anyOf::LP:
            j = "LP";
            break;
        case XAppService_anyOf::eXAppService_anyOf::MC:
            j = "MC";
            break;
        case XAppService_anyOf::eXAppService_anyOf::QP:
            j = "QP";
            break;
        case XAppService_anyOf::eXAppService_anyOf::QPD:
            j = "QPD";
            break;
        case XAppService_anyOf::eXAppService_anyOf::TS:
            j = "TS";
            break;
        case XAppService_anyOf::eXAppService_anyOf::KPI:
            j = "KPI";
            break;
        case XAppService_anyOf::eXAppService_anyOf::SSP:
            j = "SSP";
            break;
    }
}

void from_json(const nlohmann::json& j, XAppService_anyOf& o)
{
    
    auto s = j.get<std::string>();
    if (s == "AD") {
     o.setValue(XAppService_anyOf::eXAppService_anyOf::AD);
    } 
    else if (s == "LP") {
     o.setValue(XAppService_anyOf::eXAppService_anyOf::LP);
    } 
    else if (s == "MC") {
     o.setValue(XAppService_anyOf::eXAppService_anyOf::MC);
    } 
    else if (s == "QP") {
     o.setValue(XAppService_anyOf::eXAppService_anyOf::QP);
    } 
    else if (s == "QPD") {
     o.setValue(XAppService_anyOf::eXAppService_anyOf::QPD);
    } 
    else if (s == "TS") {
     o.setValue(XAppService_anyOf::eXAppService_anyOf::TS);
    } 
    else if (s == "KPI") {
     o.setValue(XAppService_anyOf::eXAppService_anyOf::KPI);
    } 
    else if (s == "SSP") {
     o.setValue(XAppService_anyOf::eXAppService_anyOf::SSP);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " XAppService_anyOf::eXAppService_anyOf";
     throw std::invalid_argument(ss.str());
    } 

}

XAppService_anyOf::eXAppService_anyOf XAppService_anyOf::getValue() const
{
    return m_value;
}
void XAppService_anyOf::setValue(XAppService_anyOf::eXAppService_anyOf value)
{
    m_value = value;
}

} // namespace xrf::model

