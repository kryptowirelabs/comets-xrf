/**
* XRF OAuth2 Initial Authentication Request API
* XRF OAuth2 Authorization server, initial authentication with the xApp API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "InitAuthErr.h"
#include "Helpers.h"

#include <sstream>

namespace xrf::model
{

InitAuthErr::InitAuthErr()
{
    m_Error = "";
    m_Error_description = "";
    m_Error_descriptionIsSet = false;
    m_Error_uri = "";
    m_Error_uriIsSet = false;
    
}

void InitAuthErr::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw xrf::helpers::ValidationException(msg.str());
    }
}

bool InitAuthErr::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool InitAuthErr::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "InitAuthErr" : pathPrefix;

                
    return success;
}

bool InitAuthErr::operator==(const InitAuthErr& rhs) const
{
    return
    
    
    (getError() == rhs.getError())
     &&
    
    
    ((!errorDescriptionIsSet() && !rhs.errorDescriptionIsSet()) || (errorDescriptionIsSet() && rhs.errorDescriptionIsSet() && getErrorDescription() == rhs.getErrorDescription())) &&
    
    
    ((!errorUriIsSet() && !rhs.errorUriIsSet()) || (errorUriIsSet() && rhs.errorUriIsSet() && getErrorUri() == rhs.getErrorUri()))
    
    ;
}

bool InitAuthErr::operator!=(const InitAuthErr& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const InitAuthErr& o)
{
    j = nlohmann::json();
    j["error"] = o.m_Error;
    if(o.errorDescriptionIsSet())
        j["error_description"] = o.m_Error_description;
    if(o.errorUriIsSet())
        j["error_uri"] = o.m_Error_uri;
    
}

void from_json(const nlohmann::json& j, InitAuthErr& o)
{
    j.at("error").get_to(o.m_Error);
    if(j.find("error_description") != j.end())
    {
        j.at("error_description").get_to(o.m_Error_description);
        o.m_Error_descriptionIsSet = true;
    } 
    if(j.find("error_uri") != j.end())
    {
        j.at("error_uri").get_to(o.m_Error_uri);
        o.m_Error_uriIsSet = true;
    } 
    
}

std::string InitAuthErr::getError() const
{
    return m_Error;
}
void InitAuthErr::setError(std::string const& value)
{
    m_Error = value;
}
std::string InitAuthErr::getErrorDescription() const
{
    return m_Error_description;
}
void InitAuthErr::setErrorDescription(std::string const& value)
{
    m_Error_description = value;
    m_Error_descriptionIsSet = true;
}
bool InitAuthErr::errorDescriptionIsSet() const
{
    return m_Error_descriptionIsSet;
}
void InitAuthErr::unsetError_description()
{
    m_Error_descriptionIsSet = false;
}
std::string InitAuthErr::getErrorUri() const
{
    return m_Error_uri;
}
void InitAuthErr::setErrorUri(std::string const& value)
{
    m_Error_uri = value;
    m_Error_uriIsSet = true;
}
bool InitAuthErr::errorUriIsSet() const
{
    return m_Error_uriIsSet;
}
void InitAuthErr::unsetError_uri()
{
    m_Error_uriIsSet = false;
}


} // namespace xrf::model

