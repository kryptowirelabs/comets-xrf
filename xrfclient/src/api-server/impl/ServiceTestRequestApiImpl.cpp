/**
* XRFc Service test API
* XRFc service testing API 
*
* The version of the OpenAPI document: 1
* Contact: tolgaoa@vt.edu
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ServiceTestRequestApiImpl.h"

namespace xrf {
namespace api {

const char *IP_VAR_S = "SERVER_XRF";
const char *MET = "METHOD";

using namespace xrf::model;
using namespace xrf::app;

ServiceTestRequestApiImpl::ServiceTestRequestApiImpl(std::shared_ptr<Pistache::Rest::Router>& rtr, xapp_main* xapp_main_inst,
		                                     std::string addr) 
    						     : ServiceTestRequestApi(rtr) , m_xapp_main(xapp_main_inst), m_addr(addr) {}

void ServiceTestRequestApiImpl::serv_test_req(const Pistache::Rest::Request &request, std::string& bearer, Pistache::Http::ResponseWriter &response) {
    	spdlog::debug("Passed bearer: {} to the handler", bearer);

        const char *tmp = getenv("SERVER_XRF");
        string ip_var_s(tmp ? tmp : "");
        if (ip_var_s.empty()) {
                spdlog::error("Server IP not foundin api handler");
                exit(EXIT_FAILURE);
        }
        spdlog::info("XRF Server for introspection reachable at: {}", ip_var_s);

        //Get validation method
        const char *tmp2 = getenv("METHOD");
        string methodval(tmp2 ? tmp2 : "");
        if (methodval.empty()) {
                spdlog::error("Token validation method not specified");
                exit(EXIT_FAILURE);
        }
	int valmet = std::stoi(methodval);
	
	bool tokenValid;
	const std::string jwksEndpoint = "http://" + ip_var_s + ":9090/oauth/jwks";
	const std::string introEndpoint = "http://" + ip_var_s + ":9090/oauth/intro";

	if (valmet == 0) {
		spdlog::info("Token validation method is: JWKS fetch");
		m_xapp_main->validate_token_self(jwksEndpoint, bearer, tokenValid);
	}
	else{
		spdlog::info("Token validation method is: Full remote introspection");
		m_xapp_main->validate_token_remote(introEndpoint, bearer, tokenValid);
	}
	
	if (tokenValid) {	
		response.send(Pistache::Http::Code::Ok, "https://www.tomorrowtides.com/service15.html\n");
	}else spdlog::error("OAuth Token invalid");

}

}
}

